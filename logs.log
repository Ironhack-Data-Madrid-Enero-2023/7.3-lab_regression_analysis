2023-03-01 14:34:29,050:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 14:34:29,050:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 14:34:29,050:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 14:34:29,050:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 14:34:30,949:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-03-01 14:34:31,440:INFO:PyCaret ClassificationExperiment
2023-03-01 14:34:31,440:INFO:Logging name: clf-default-name
2023-03-01 14:34:31,440:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-03-01 14:34:31,440:INFO:version 3.0.0.rc9
2023-03-01 14:34:31,440:INFO:Initializing setup()
2023-03-01 14:34:31,440:INFO:self.USI: 82e2
2023-03-01 14:34:31,440:INFO:self._variable_keys: {'exp_id', 'fold_generator', 'gpu_param', 'X_train', 'html_param', 'gpu_n_jobs_param', 'X_test', 'logging_param', 'log_plots_param', 'y_test', 'y', 'fix_imbalance', 'USI', 'idx', 'memory', 'target_param', 'y_train', 'data', '_available_plots', 'n_jobs_param', 'is_multiclass', 'fold_groups_param', 'exp_name_log', 'X', 'seed', 'fold_shuffle_param', '_ml_usecase', 'pipeline'}
2023-03-01 14:34:31,440:INFO:Checking environment
2023-03-01 14:34:31,440:INFO:python_version: 3.9.13
2023-03-01 14:34:31,440:INFO:python_build: ('main', 'Aug 25 2022 18:29:29')
2023-03-01 14:34:31,440:INFO:machine: x86_64
2023-03-01 14:34:31,440:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-03-01 14:34:31,440:INFO:Memory: svmem(total=8589934592, available=2938253312, percent=65.8, used=4809994240, free=12976128, active=2927951872, inactive=2896199680, wired=1882042368)
2023-03-01 14:34:31,440:INFO:Physical Core: 4
2023-03-01 14:34:31,440:INFO:Logical Core: 8
2023-03-01 14:34:31,440:INFO:Checking libraries
2023-03-01 14:34:31,440:INFO:System:
2023-03-01 14:34:31,441:INFO:    python: 3.9.13 (main, Aug 25 2022, 18:29:29)  [Clang 12.0.0 ]
2023-03-01 14:34:31,441:INFO:executable: /Users/jorgefreire/opt/anaconda3/bin/python
2023-03-01 14:34:31,441:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-03-01 14:34:31,441:INFO:PyCaret required dependencies:
2023-03-01 14:34:31,441:INFO:                 pip: 22.2.2
2023-03-01 14:34:31,441:INFO:          setuptools: 63.4.1
2023-03-01 14:34:31,441:INFO:             pycaret: 3.0.0rc9
2023-03-01 14:34:31,441:INFO:             IPython: 7.31.1
2023-03-01 14:34:31,441:INFO:          ipywidgets: 7.6.5
2023-03-01 14:34:31,441:INFO:                tqdm: 4.64.1
2023-03-01 14:34:31,441:INFO:               numpy: 1.21.6
2023-03-01 14:34:31,441:INFO:              pandas: 1.5.3
2023-03-01 14:34:31,441:INFO:              jinja2: 3.1.2
2023-03-01 14:34:31,441:INFO:               scipy: 1.9.1
2023-03-01 14:34:31,441:INFO:              joblib: 1.2.0
2023-03-01 14:34:31,441:INFO:             sklearn: 1.0.2
2023-03-01 14:34:31,441:INFO:                pyod: 1.0.7
2023-03-01 14:34:31,441:INFO:            imblearn: 0.10.1
2023-03-01 14:34:31,441:INFO:   category_encoders: 2.6.0
2023-03-01 14:34:31,441:INFO:            lightgbm: 3.3.5
2023-03-01 14:34:31,441:INFO:               numba: 0.55.1
2023-03-01 14:34:31,441:INFO:            requests: 2.28.1
2023-03-01 14:34:31,441:INFO:          matplotlib: 3.5.2
2023-03-01 14:34:31,442:INFO:          scikitplot: 0.3.7
2023-03-01 14:34:31,442:INFO:         yellowbrick: 1.5
2023-03-01 14:34:31,442:INFO:              plotly: 5.9.0
2023-03-01 14:34:31,442:INFO:             kaleido: 0.2.1
2023-03-01 14:34:31,442:INFO:         statsmodels: 0.13.2
2023-03-01 14:34:31,442:INFO:              sktime: 0.16.1
2023-03-01 14:34:31,442:INFO:               tbats: 1.1.2
2023-03-01 14:34:31,442:INFO:            pmdarima: 2.0.2
2023-03-01 14:34:31,442:INFO:              psutil: 5.9.0
2023-03-01 14:34:31,442:INFO:PyCaret optional dependencies:
2023-03-01 14:34:32,198:INFO:                shap: Not installed
2023-03-01 14:34:32,198:INFO:           interpret: Not installed
2023-03-01 14:34:32,198:INFO:                umap: Not installed
2023-03-01 14:34:32,198:INFO:    pandas_profiling: Not installed
2023-03-01 14:34:32,198:INFO:  explainerdashboard: Not installed
2023-03-01 14:34:32,198:INFO:             autoviz: Not installed
2023-03-01 14:34:32,198:INFO:           fairlearn: Not installed
2023-03-01 14:34:32,198:INFO:             xgboost: Not installed
2023-03-01 14:34:32,198:INFO:            catboost: Not installed
2023-03-01 14:34:32,198:INFO:              kmodes: Not installed
2023-03-01 14:34:32,198:INFO:             mlxtend: Not installed
2023-03-01 14:34:32,199:INFO:       statsforecast: Not installed
2023-03-01 14:34:32,199:INFO:        tune_sklearn: Not installed
2023-03-01 14:34:32,199:INFO:                 ray: Not installed
2023-03-01 14:34:32,199:INFO:            hyperopt: Not installed
2023-03-01 14:34:32,199:INFO:              optuna: Not installed
2023-03-01 14:34:32,199:INFO:               skopt: Not installed
2023-03-01 14:34:32,199:INFO:              mlflow: Not installed
2023-03-01 14:34:32,199:INFO:              gradio: Not installed
2023-03-01 14:34:32,199:INFO:             fastapi: 0.90.0
2023-03-01 14:34:32,199:INFO:             uvicorn: 0.20.0
2023-03-01 14:34:32,199:INFO:              m2cgen: Not installed
2023-03-01 14:34:32,199:INFO:           evidently: Not installed
2023-03-01 14:34:32,199:INFO:               fugue: Not installed
2023-03-01 14:34:32,199:INFO:           streamlit: Not installed
2023-03-01 14:34:32,199:INFO:             prophet: Not installed
2023-03-01 14:34:32,199:INFO:None
2023-03-01 14:34:32,199:INFO:Set up data.
2023-03-01 14:34:46,424:INFO:PyCaret ClassificationExperiment
2023-03-01 14:34:46,425:INFO:Logging name: clf-default-name
2023-03-01 14:34:46,425:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-03-01 14:34:46,425:INFO:version 3.0.0.rc9
2023-03-01 14:34:46,425:INFO:Initializing setup()
2023-03-01 14:34:46,425:INFO:self.USI: 72c9
2023-03-01 14:34:46,426:INFO:self._variable_keys: {'exp_id', 'fold_generator', 'gpu_param', 'X_train', 'html_param', 'gpu_n_jobs_param', 'X_test', 'logging_param', 'log_plots_param', 'y_test', 'y', 'fix_imbalance', 'USI', 'idx', 'memory', 'target_param', 'y_train', 'data', '_available_plots', 'n_jobs_param', 'is_multiclass', 'fold_groups_param', 'exp_name_log', 'X', 'seed', 'fold_shuffle_param', '_ml_usecase', 'pipeline'}
2023-03-01 14:34:46,426:INFO:Checking environment
2023-03-01 14:34:46,426:INFO:python_version: 3.9.13
2023-03-01 14:34:46,426:INFO:python_build: ('main', 'Aug 25 2022 18:29:29')
2023-03-01 14:34:46,426:INFO:machine: x86_64
2023-03-01 14:34:46,426:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-03-01 14:34:46,426:INFO:Memory: svmem(total=8589934592, available=2773811200, percent=67.7, used=4971081728, free=25055232, active=2751324160, inactive=2747293696, wired=2219757568)
2023-03-01 14:34:46,426:INFO:Physical Core: 4
2023-03-01 14:34:46,426:INFO:Logical Core: 8
2023-03-01 14:34:46,426:INFO:Checking libraries
2023-03-01 14:34:46,426:INFO:System:
2023-03-01 14:34:46,426:INFO:    python: 3.9.13 (main, Aug 25 2022, 18:29:29)  [Clang 12.0.0 ]
2023-03-01 14:34:46,426:INFO:executable: /Users/jorgefreire/opt/anaconda3/bin/python
2023-03-01 14:34:46,427:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-03-01 14:34:46,427:INFO:PyCaret required dependencies:
2023-03-01 14:34:46,427:INFO:                 pip: 22.2.2
2023-03-01 14:34:46,427:INFO:          setuptools: 63.4.1
2023-03-01 14:34:46,427:INFO:             pycaret: 3.0.0rc9
2023-03-01 14:34:46,427:INFO:             IPython: 7.31.1
2023-03-01 14:34:46,427:INFO:          ipywidgets: 7.6.5
2023-03-01 14:34:46,427:INFO:                tqdm: 4.64.1
2023-03-01 14:34:46,427:INFO:               numpy: 1.21.6
2023-03-01 14:34:46,427:INFO:              pandas: 1.5.3
2023-03-01 14:34:46,427:INFO:              jinja2: 3.1.2
2023-03-01 14:34:46,427:INFO:               scipy: 1.9.1
2023-03-01 14:34:46,428:INFO:              joblib: 1.2.0
2023-03-01 14:34:46,428:INFO:             sklearn: 1.0.2
2023-03-01 14:34:46,428:INFO:                pyod: 1.0.7
2023-03-01 14:34:46,428:INFO:            imblearn: 0.10.1
2023-03-01 14:34:46,428:INFO:   category_encoders: 2.6.0
2023-03-01 14:34:46,428:INFO:            lightgbm: 3.3.5
2023-03-01 14:34:46,428:INFO:               numba: 0.55.1
2023-03-01 14:34:46,428:INFO:            requests: 2.28.1
2023-03-01 14:34:46,428:INFO:          matplotlib: 3.5.2
2023-03-01 14:34:46,428:INFO:          scikitplot: 0.3.7
2023-03-01 14:34:46,428:INFO:         yellowbrick: 1.5
2023-03-01 14:34:46,428:INFO:              plotly: 5.9.0
2023-03-01 14:34:46,428:INFO:             kaleido: 0.2.1
2023-03-01 14:34:46,428:INFO:         statsmodels: 0.13.2
2023-03-01 14:34:46,428:INFO:              sktime: 0.16.1
2023-03-01 14:34:46,428:INFO:               tbats: 1.1.2
2023-03-01 14:34:46,428:INFO:            pmdarima: 2.0.2
2023-03-01 14:34:46,428:INFO:              psutil: 5.9.0
2023-03-01 14:34:46,428:INFO:PyCaret optional dependencies:
2023-03-01 14:34:46,428:INFO:                shap: Not installed
2023-03-01 14:34:46,428:INFO:           interpret: Not installed
2023-03-01 14:34:46,429:INFO:                umap: Not installed
2023-03-01 14:34:46,429:INFO:    pandas_profiling: Not installed
2023-03-01 14:34:46,429:INFO:  explainerdashboard: Not installed
2023-03-01 14:34:46,429:INFO:             autoviz: Not installed
2023-03-01 14:34:46,429:INFO:           fairlearn: Not installed
2023-03-01 14:34:46,429:INFO:             xgboost: Not installed
2023-03-01 14:34:46,429:INFO:            catboost: Not installed
2023-03-01 14:34:46,429:INFO:              kmodes: Not installed
2023-03-01 14:34:46,429:INFO:             mlxtend: Not installed
2023-03-01 14:34:46,429:INFO:       statsforecast: Not installed
2023-03-01 14:34:46,429:INFO:        tune_sklearn: Not installed
2023-03-01 14:34:46,429:INFO:                 ray: Not installed
2023-03-01 14:34:46,429:INFO:            hyperopt: Not installed
2023-03-01 14:34:46,429:INFO:              optuna: Not installed
2023-03-01 14:34:46,429:INFO:               skopt: Not installed
2023-03-01 14:34:46,429:INFO:              mlflow: Not installed
2023-03-01 14:34:46,429:INFO:              gradio: Not installed
2023-03-01 14:34:46,429:INFO:             fastapi: 0.90.0
2023-03-01 14:34:46,429:INFO:             uvicorn: 0.20.0
2023-03-01 14:34:46,429:INFO:              m2cgen: Not installed
2023-03-01 14:34:46,429:INFO:           evidently: Not installed
2023-03-01 14:34:46,430:INFO:               fugue: Not installed
2023-03-01 14:34:46,430:INFO:           streamlit: Not installed
2023-03-01 14:34:46,430:INFO:             prophet: Not installed
2023-03-01 14:34:46,430:INFO:None
2023-03-01 14:34:46,430:INFO:Set up data.
2023-03-01 14:34:46,440:INFO:Set up train/test split.
2023-03-01 15:28:59,342:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 15:28:59,342:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 15:28:59,342:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 15:28:59,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 15:28:59,697:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-03-01 15:28:59,945:INFO:PyCaret RegressionExperiment
2023-03-01 15:28:59,946:INFO:Logging name: reg-default-name
2023-03-01 15:28:59,946:INFO:ML Usecase: MLUsecase.REGRESSION
2023-03-01 15:28:59,946:INFO:version 3.0.0.rc9
2023-03-01 15:28:59,946:INFO:Initializing setup()
2023-03-01 15:28:59,946:INFO:self.USI: 1f86
2023-03-01 15:28:59,946:INFO:self._variable_keys: {'pipeline', 'log_plots_param', 'gpu_param', 'fold_groups_param', 'data', 'fold_generator', 'logging_param', 'exp_id', 'USI', 'X_train', 'target_param', 'gpu_n_jobs_param', 'X', 'html_param', 'y', 'idx', 'transform_target_param', 'n_jobs_param', 'memory', 'y_train', 'X_test', '_available_plots', 'y_test', 'seed', 'exp_name_log', 'fold_shuffle_param', '_ml_usecase'}
2023-03-01 15:28:59,946:INFO:Checking environment
2023-03-01 15:28:59,946:INFO:python_version: 3.9.13
2023-03-01 15:28:59,946:INFO:python_build: ('main', 'Aug 25 2022 18:29:29')
2023-03-01 15:28:59,946:INFO:machine: x86_64
2023-03-01 15:28:59,946:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-03-01 15:28:59,946:INFO:Memory: svmem(total=8589934592, available=2719776768, percent=68.3, used=4866953216, free=18292736, active=2706849792, inactive=2670874624, wired=2160103424)
2023-03-01 15:28:59,946:INFO:Physical Core: 4
2023-03-01 15:28:59,946:INFO:Logical Core: 8
2023-03-01 15:28:59,946:INFO:Checking libraries
2023-03-01 15:28:59,946:INFO:System:
2023-03-01 15:28:59,946:INFO:    python: 3.9.13 (main, Aug 25 2022, 18:29:29)  [Clang 12.0.0 ]
2023-03-01 15:28:59,946:INFO:executable: /Users/jorgefreire/opt/anaconda3/bin/python
2023-03-01 15:28:59,946:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-03-01 15:28:59,946:INFO:PyCaret required dependencies:
2023-03-01 15:28:59,946:INFO:                 pip: 22.2.2
2023-03-01 15:28:59,947:INFO:          setuptools: 63.4.1
2023-03-01 15:28:59,947:INFO:             pycaret: 3.0.0rc9
2023-03-01 15:28:59,947:INFO:             IPython: 7.31.1
2023-03-01 15:28:59,947:INFO:          ipywidgets: 7.6.5
2023-03-01 15:28:59,947:INFO:                tqdm: 4.64.1
2023-03-01 15:28:59,947:INFO:               numpy: 1.21.6
2023-03-01 15:28:59,947:INFO:              pandas: 1.5.3
2023-03-01 15:28:59,947:INFO:              jinja2: 3.1.2
2023-03-01 15:28:59,947:INFO:               scipy: 1.9.1
2023-03-01 15:28:59,947:INFO:              joblib: 1.2.0
2023-03-01 15:28:59,947:INFO:             sklearn: 1.0.2
2023-03-01 15:28:59,947:INFO:                pyod: 1.0.7
2023-03-01 15:28:59,947:INFO:            imblearn: 0.10.1
2023-03-01 15:28:59,947:INFO:   category_encoders: 2.6.0
2023-03-01 15:28:59,947:INFO:            lightgbm: 3.3.5
2023-03-01 15:28:59,947:INFO:               numba: 0.55.1
2023-03-01 15:28:59,947:INFO:            requests: 2.28.1
2023-03-01 15:28:59,947:INFO:          matplotlib: 3.5.2
2023-03-01 15:28:59,947:INFO:          scikitplot: 0.3.7
2023-03-01 15:28:59,947:INFO:         yellowbrick: 1.5
2023-03-01 15:28:59,947:INFO:              plotly: 5.9.0
2023-03-01 15:28:59,947:INFO:             kaleido: 0.2.1
2023-03-01 15:28:59,947:INFO:         statsmodels: 0.13.2
2023-03-01 15:28:59,947:INFO:              sktime: 0.16.1
2023-03-01 15:28:59,947:INFO:               tbats: 1.1.2
2023-03-01 15:28:59,947:INFO:            pmdarima: 2.0.2
2023-03-01 15:28:59,947:INFO:              psutil: 5.9.0
2023-03-01 15:28:59,948:INFO:PyCaret optional dependencies:
2023-03-01 15:29:00,470:INFO:                shap: Not installed
2023-03-01 15:29:00,470:INFO:           interpret: Not installed
2023-03-01 15:29:00,470:INFO:                umap: Not installed
2023-03-01 15:29:00,470:INFO:    pandas_profiling: Not installed
2023-03-01 15:29:00,470:INFO:  explainerdashboard: Not installed
2023-03-01 15:29:00,470:INFO:             autoviz: Not installed
2023-03-01 15:29:00,470:INFO:           fairlearn: Not installed
2023-03-01 15:29:00,470:INFO:             xgboost: Not installed
2023-03-01 15:29:00,470:INFO:            catboost: Not installed
2023-03-01 15:29:00,471:INFO:              kmodes: Not installed
2023-03-01 15:29:00,471:INFO:             mlxtend: Not installed
2023-03-01 15:29:00,471:INFO:       statsforecast: Not installed
2023-03-01 15:29:00,471:INFO:        tune_sklearn: Not installed
2023-03-01 15:29:00,471:INFO:                 ray: Not installed
2023-03-01 15:29:00,471:INFO:            hyperopt: Not installed
2023-03-01 15:29:00,471:INFO:              optuna: Not installed
2023-03-01 15:29:00,471:INFO:               skopt: Not installed
2023-03-01 15:29:00,471:INFO:              mlflow: Not installed
2023-03-01 15:29:00,471:INFO:              gradio: Not installed
2023-03-01 15:29:00,471:INFO:             fastapi: 0.90.0
2023-03-01 15:29:00,471:INFO:             uvicorn: 0.20.0
2023-03-01 15:29:00,471:INFO:              m2cgen: Not installed
2023-03-01 15:29:00,471:INFO:           evidently: Not installed
2023-03-01 15:29:00,471:INFO:               fugue: Not installed
2023-03-01 15:29:00,471:INFO:           streamlit: Not installed
2023-03-01 15:29:00,471:INFO:             prophet: Not installed
2023-03-01 15:29:00,471:INFO:None
2023-03-01 15:29:00,471:INFO:Set up data.
2023-03-01 15:29:00,498:INFO:Set up train/test split.
2023-03-01 15:29:00,511:INFO:Set up index.
2023-03-01 15:29:00,513:INFO:Set up folding strategy.
2023-03-01 15:29:00,513:INFO:Assigning column types.
2023-03-01 15:29:00,519:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-01 15:29:00,519:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,526:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,531:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,609:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,657:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,658:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:00,786:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:00,786:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,791:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,796:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,869:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,923:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,924:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:00,924:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:00,924:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-03-01 15:29:00,929:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:29:00,935:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,025:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,075:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,075:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,075:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,080:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,085:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,149:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,195:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,195:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,196:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,196:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-03-01 15:29:01,206:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,269:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,313:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,313:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,313:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,323:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,391:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,440:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,441:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,441:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,441:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-03-01 15:29:01,513:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,563:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,564:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,564:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,636:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,682:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,683:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,683:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,683:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-01 15:29:01,757:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,805:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,806:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,880:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:29:01,928:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,928:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:01,929:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-03-01 15:29:02,045:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:02,045:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:02,167:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:02,168:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:02,171:INFO:Preparing preprocessing pipeline...
2023-03-01 15:29:02,173:INFO:Set up column name cleaning.
2023-03-01 15:29:02,173:INFO:Set up simple imputation.
2023-03-01 15:29:02,206:INFO:Finished creating preprocessing pipeline.
2023-03-01 15:29:02,214:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/6l/31x7hhz57xx8r01s93tx63f00000gn/T/joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Year', 'Cylinders',
                                             'Fuel Barrels/Year',
                                             'Combined MPG', 'Fuel Cost/Year'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-03-01 15:29:02,214:INFO:Creating final display dataframe.
2023-03-01 15:29:02,348:INFO:Setup _display_container:                     Description                    Value
0                    Session id                        1
1                        Target  CO2 Emission Grams/Mile
2                   Target type               Regression
3           Original data shape               (35952, 6)
4        Transformed data shape               (35952, 6)
5   Transformed train set shape               (25166, 6)
6    Transformed test set shape               (10786, 6)
7              Numeric features                        5
8                    Preprocess                     True
9               Imputation type                   simple
10           Numeric imputation                     mean
11       Categorical imputation                     mode
12               Fold Generator                    KFold
13                  Fold Number                       10
14                     CPU Jobs                       -1
15                      Use GPU                    False
16               Log Experiment                    False
17              Experiment Name         reg-default-name
18                          USI                     1f86
2023-03-01 15:29:02,505:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:02,505:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:02,630:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:02,630:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:29:02,630:INFO:setup() successfully completed in 2.69s...............
2023-03-01 15:29:02,631:INFO:Initializing compare_models()
2023-03-01 15:29:02,631:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-03-01 15:29:02,631:INFO:Checking exceptions
2023-03-01 15:29:02,634:INFO:Preparing display monitor
2023-03-01 15:29:02,731:INFO:Initializing Linear Regression
2023-03-01 15:29:02,731:INFO:Total runtime is 6.802876790364584e-06 minutes
2023-03-01 15:29:02,739:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:02,741:INFO:Initializing create_model()
2023-03-01 15:29:02,741:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:02,742:INFO:Checking exceptions
2023-03-01 15:29:02,742:INFO:Importing libraries
2023-03-01 15:29:02,742:INFO:Copying training dataset
2023-03-01 15:29:02,763:INFO:Defining folds
2023-03-01 15:29:02,764:INFO:Declaring metric variables
2023-03-01 15:29:02,768:INFO:Importing untrained model
2023-03-01 15:29:02,776:INFO:Linear Regression Imported successfully
2023-03-01 15:29:02,787:INFO:Starting cross validation
2023-03-01 15:29:02,796:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:15,111:INFO:Calculating mean and std
2023-03-01 15:29:15,117:INFO:Creating metrics dataframe
2023-03-01 15:29:15,124:INFO:Uploading results into container
2023-03-01 15:29:15,125:INFO:Uploading model into container now
2023-03-01 15:29:15,126:INFO:_master_model_container: 1
2023-03-01 15:29:15,126:INFO:_display_container: 2
2023-03-01 15:29:15,126:INFO:LinearRegression(n_jobs=-1)
2023-03-01 15:29:15,126:INFO:create_model() successfully completed......................................
2023-03-01 15:29:15,285:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:15,286:INFO:Creating metrics dataframe
2023-03-01 15:29:15,300:INFO:Initializing Lasso Regression
2023-03-01 15:29:15,300:INFO:Total runtime is 0.20949788490931193 minutes
2023-03-01 15:29:15,306:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:15,307:INFO:Initializing create_model()
2023-03-01 15:29:15,307:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:15,307:INFO:Checking exceptions
2023-03-01 15:29:15,307:INFO:Importing libraries
2023-03-01 15:29:15,307:INFO:Copying training dataset
2023-03-01 15:29:15,323:INFO:Defining folds
2023-03-01 15:29:15,323:INFO:Declaring metric variables
2023-03-01 15:29:15,327:INFO:Importing untrained model
2023-03-01 15:29:15,332:INFO:Lasso Regression Imported successfully
2023-03-01 15:29:15,339:INFO:Starting cross validation
2023-03-01 15:29:15,340:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:15,600:INFO:Calculating mean and std
2023-03-01 15:29:15,602:INFO:Creating metrics dataframe
2023-03-01 15:29:15,606:INFO:Uploading results into container
2023-03-01 15:29:15,607:INFO:Uploading model into container now
2023-03-01 15:29:15,607:INFO:_master_model_container: 2
2023-03-01 15:29:15,607:INFO:_display_container: 2
2023-03-01 15:29:15,607:INFO:Lasso(random_state=1)
2023-03-01 15:29:15,607:INFO:create_model() successfully completed......................................
2023-03-01 15:29:15,708:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:15,708:INFO:Creating metrics dataframe
2023-03-01 15:29:15,721:INFO:Initializing Ridge Regression
2023-03-01 15:29:15,721:INFO:Total runtime is 0.2165135661760966 minutes
2023-03-01 15:29:15,726:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:15,726:INFO:Initializing create_model()
2023-03-01 15:29:15,726:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:15,726:INFO:Checking exceptions
2023-03-01 15:29:15,726:INFO:Importing libraries
2023-03-01 15:29:15,726:INFO:Copying training dataset
2023-03-01 15:29:15,739:INFO:Defining folds
2023-03-01 15:29:15,739:INFO:Declaring metric variables
2023-03-01 15:29:15,743:INFO:Importing untrained model
2023-03-01 15:29:15,747:INFO:Ridge Regression Imported successfully
2023-03-01 15:29:15,754:INFO:Starting cross validation
2023-03-01 15:29:15,754:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:15,953:INFO:Calculating mean and std
2023-03-01 15:29:15,954:INFO:Creating metrics dataframe
2023-03-01 15:29:15,957:INFO:Uploading results into container
2023-03-01 15:29:15,958:INFO:Uploading model into container now
2023-03-01 15:29:15,959:INFO:_master_model_container: 3
2023-03-01 15:29:15,959:INFO:_display_container: 2
2023-03-01 15:29:15,959:INFO:Ridge(random_state=1)
2023-03-01 15:29:15,959:INFO:create_model() successfully completed......................................
2023-03-01 15:29:16,052:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:16,052:INFO:Creating metrics dataframe
2023-03-01 15:29:16,064:INFO:Initializing Elastic Net
2023-03-01 15:29:16,064:INFO:Total runtime is 0.22223040262858074 minutes
2023-03-01 15:29:16,069:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:16,069:INFO:Initializing create_model()
2023-03-01 15:29:16,069:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:16,069:INFO:Checking exceptions
2023-03-01 15:29:16,070:INFO:Importing libraries
2023-03-01 15:29:16,070:INFO:Copying training dataset
2023-03-01 15:29:16,082:INFO:Defining folds
2023-03-01 15:29:16,082:INFO:Declaring metric variables
2023-03-01 15:29:16,087:INFO:Importing untrained model
2023-03-01 15:29:16,091:INFO:Elastic Net Imported successfully
2023-03-01 15:29:16,098:INFO:Starting cross validation
2023-03-01 15:29:16,100:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:16,411:INFO:Calculating mean and std
2023-03-01 15:29:16,414:INFO:Creating metrics dataframe
2023-03-01 15:29:16,418:INFO:Uploading results into container
2023-03-01 15:29:16,419:INFO:Uploading model into container now
2023-03-01 15:29:16,420:INFO:_master_model_container: 4
2023-03-01 15:29:16,420:INFO:_display_container: 2
2023-03-01 15:29:16,421:INFO:ElasticNet(random_state=1)
2023-03-01 15:29:16,421:INFO:create_model() successfully completed......................................
2023-03-01 15:29:16,523:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:16,523:INFO:Creating metrics dataframe
2023-03-01 15:29:16,535:INFO:Initializing Least Angle Regression
2023-03-01 15:29:16,535:INFO:Total runtime is 0.23007776737213134 minutes
2023-03-01 15:29:16,539:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:16,539:INFO:Initializing create_model()
2023-03-01 15:29:16,539:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:16,540:INFO:Checking exceptions
2023-03-01 15:29:16,540:INFO:Importing libraries
2023-03-01 15:29:16,540:INFO:Copying training dataset
2023-03-01 15:29:16,552:INFO:Defining folds
2023-03-01 15:29:16,553:INFO:Declaring metric variables
2023-03-01 15:29:16,557:INFO:Importing untrained model
2023-03-01 15:29:16,561:INFO:Least Angle Regression Imported successfully
2023-03-01 15:29:16,569:INFO:Starting cross validation
2023-03-01 15:29:16,571:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:16,650:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,664:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,684:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,699:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,716:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,730:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,750:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,760:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,773:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,787:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:16,816:INFO:Calculating mean and std
2023-03-01 15:29:16,817:INFO:Creating metrics dataframe
2023-03-01 15:29:16,821:INFO:Uploading results into container
2023-03-01 15:29:16,821:INFO:Uploading model into container now
2023-03-01 15:29:16,822:INFO:_master_model_container: 5
2023-03-01 15:29:16,822:INFO:_display_container: 2
2023-03-01 15:29:16,823:INFO:Lars(random_state=1)
2023-03-01 15:29:16,823:INFO:create_model() successfully completed......................................
2023-03-01 15:29:16,926:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:16,926:INFO:Creating metrics dataframe
2023-03-01 15:29:16,940:INFO:Initializing Lasso Least Angle Regression
2023-03-01 15:29:16,940:INFO:Total runtime is 0.23682740132013957 minutes
2023-03-01 15:29:16,944:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:16,945:INFO:Initializing create_model()
2023-03-01 15:29:16,945:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:16,945:INFO:Checking exceptions
2023-03-01 15:29:16,946:INFO:Importing libraries
2023-03-01 15:29:16,946:INFO:Copying training dataset
2023-03-01 15:29:16,957:INFO:Defining folds
2023-03-01 15:29:16,957:INFO:Declaring metric variables
2023-03-01 15:29:16,960:INFO:Importing untrained model
2023-03-01 15:29:16,964:INFO:Lasso Least Angle Regression Imported successfully
2023-03-01 15:29:16,972:INFO:Starting cross validation
2023-03-01 15:29:16,973:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:17,043:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,055:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,070:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,088:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,105:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,121:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,134:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,145:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,160:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,163:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:29:17,181:INFO:Calculating mean and std
2023-03-01 15:29:17,183:INFO:Creating metrics dataframe
2023-03-01 15:29:17,186:INFO:Uploading results into container
2023-03-01 15:29:17,186:INFO:Uploading model into container now
2023-03-01 15:29:17,187:INFO:_master_model_container: 6
2023-03-01 15:29:17,187:INFO:_display_container: 2
2023-03-01 15:29:17,188:INFO:LassoLars(random_state=1)
2023-03-01 15:29:17,188:INFO:create_model() successfully completed......................................
2023-03-01 15:29:17,281:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:17,281:INFO:Creating metrics dataframe
2023-03-01 15:29:17,294:INFO:Initializing Orthogonal Matching Pursuit
2023-03-01 15:29:17,294:INFO:Total runtime is 0.24272736708323162 minutes
2023-03-01 15:29:17,298:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:17,298:INFO:Initializing create_model()
2023-03-01 15:29:17,298:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:17,298:INFO:Checking exceptions
2023-03-01 15:29:17,299:INFO:Importing libraries
2023-03-01 15:29:17,299:INFO:Copying training dataset
2023-03-01 15:29:17,310:INFO:Defining folds
2023-03-01 15:29:17,311:INFO:Declaring metric variables
2023-03-01 15:29:17,314:INFO:Importing untrained model
2023-03-01 15:29:17,318:INFO:Orthogonal Matching Pursuit Imported successfully
2023-03-01 15:29:17,325:INFO:Starting cross validation
2023-03-01 15:29:17,326:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:17,382:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,399:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,408:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,439:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,448:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,471:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,485:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,496:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,510:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,517:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:29:17,535:INFO:Calculating mean and std
2023-03-01 15:29:17,537:INFO:Creating metrics dataframe
2023-03-01 15:29:17,540:INFO:Uploading results into container
2023-03-01 15:29:17,541:INFO:Uploading model into container now
2023-03-01 15:29:17,541:INFO:_master_model_container: 7
2023-03-01 15:29:17,541:INFO:_display_container: 2
2023-03-01 15:29:17,542:INFO:OrthogonalMatchingPursuit()
2023-03-01 15:29:17,542:INFO:create_model() successfully completed......................................
2023-03-01 15:29:17,637:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:17,638:INFO:Creating metrics dataframe
2023-03-01 15:29:17,651:INFO:Initializing Bayesian Ridge
2023-03-01 15:29:17,652:INFO:Total runtime is 0.24868365128835043 minutes
2023-03-01 15:29:17,656:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:17,656:INFO:Initializing create_model()
2023-03-01 15:29:17,656:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:17,656:INFO:Checking exceptions
2023-03-01 15:29:17,656:INFO:Importing libraries
2023-03-01 15:29:17,656:INFO:Copying training dataset
2023-03-01 15:29:17,669:INFO:Defining folds
2023-03-01 15:29:17,669:INFO:Declaring metric variables
2023-03-01 15:29:17,672:INFO:Importing untrained model
2023-03-01 15:29:17,676:INFO:Bayesian Ridge Imported successfully
2023-03-01 15:29:17,683:INFO:Starting cross validation
2023-03-01 15:29:17,684:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:17,898:INFO:Calculating mean and std
2023-03-01 15:29:17,900:INFO:Creating metrics dataframe
2023-03-01 15:29:17,903:INFO:Uploading results into container
2023-03-01 15:29:17,903:INFO:Uploading model into container now
2023-03-01 15:29:17,904:INFO:_master_model_container: 8
2023-03-01 15:29:17,904:INFO:_display_container: 2
2023-03-01 15:29:17,905:INFO:BayesianRidge()
2023-03-01 15:29:17,905:INFO:create_model() successfully completed......................................
2023-03-01 15:29:18,000:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:18,000:INFO:Creating metrics dataframe
2023-03-01 15:29:18,014:INFO:Initializing Passive Aggressive Regressor
2023-03-01 15:29:18,015:INFO:Total runtime is 0.25473355054855346 minutes
2023-03-01 15:29:18,019:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:18,019:INFO:Initializing create_model()
2023-03-01 15:29:18,019:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:18,019:INFO:Checking exceptions
2023-03-01 15:29:18,020:INFO:Importing libraries
2023-03-01 15:29:18,020:INFO:Copying training dataset
2023-03-01 15:29:18,032:INFO:Defining folds
2023-03-01 15:29:18,032:INFO:Declaring metric variables
2023-03-01 15:29:18,036:INFO:Importing untrained model
2023-03-01 15:29:18,040:INFO:Passive Aggressive Regressor Imported successfully
2023-03-01 15:29:18,047:INFO:Starting cross validation
2023-03-01 15:29:18,048:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:19,361:INFO:Calculating mean and std
2023-03-01 15:29:19,362:INFO:Creating metrics dataframe
2023-03-01 15:29:19,366:INFO:Uploading results into container
2023-03-01 15:29:19,367:INFO:Uploading model into container now
2023-03-01 15:29:19,368:INFO:_master_model_container: 9
2023-03-01 15:29:19,368:INFO:_display_container: 2
2023-03-01 15:29:19,368:INFO:PassiveAggressiveRegressor(random_state=1)
2023-03-01 15:29:19,369:INFO:create_model() successfully completed......................................
2023-03-01 15:29:19,464:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:19,464:INFO:Creating metrics dataframe
2023-03-01 15:29:19,478:INFO:Initializing Huber Regressor
2023-03-01 15:29:19,478:INFO:Total runtime is 0.2791306694348653 minutes
2023-03-01 15:29:19,482:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:19,483:INFO:Initializing create_model()
2023-03-01 15:29:19,483:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:19,483:INFO:Checking exceptions
2023-03-01 15:29:19,483:INFO:Importing libraries
2023-03-01 15:29:19,483:INFO:Copying training dataset
2023-03-01 15:29:19,494:INFO:Defining folds
2023-03-01 15:29:19,494:INFO:Declaring metric variables
2023-03-01 15:29:19,498:INFO:Importing untrained model
2023-03-01 15:29:19,502:INFO:Huber Regressor Imported successfully
2023-03-01 15:29:19,509:INFO:Starting cross validation
2023-03-01 15:29:19,510:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:19,941:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:19,953:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:19,968:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:19,988:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:19,990:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:20,002:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:20,049:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:20,051:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:20,240:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:20,245:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-03-01 15:29:20,273:INFO:Calculating mean and std
2023-03-01 15:29:20,275:INFO:Creating metrics dataframe
2023-03-01 15:29:20,279:INFO:Uploading results into container
2023-03-01 15:29:20,280:INFO:Uploading model into container now
2023-03-01 15:29:20,280:INFO:_master_model_container: 10
2023-03-01 15:29:20,280:INFO:_display_container: 2
2023-03-01 15:29:20,281:INFO:HuberRegressor()
2023-03-01 15:29:20,281:INFO:create_model() successfully completed......................................
2023-03-01 15:29:20,376:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:20,376:INFO:Creating metrics dataframe
2023-03-01 15:29:20,391:INFO:Initializing K Neighbors Regressor
2023-03-01 15:29:20,391:INFO:Total runtime is 0.29433728456497193 minutes
2023-03-01 15:29:20,395:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:20,396:INFO:Initializing create_model()
2023-03-01 15:29:20,396:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:20,396:INFO:Checking exceptions
2023-03-01 15:29:20,396:INFO:Importing libraries
2023-03-01 15:29:20,396:INFO:Copying training dataset
2023-03-01 15:29:20,408:INFO:Defining folds
2023-03-01 15:29:20,408:INFO:Declaring metric variables
2023-03-01 15:29:20,412:INFO:Importing untrained model
2023-03-01 15:29:20,416:INFO:K Neighbors Regressor Imported successfully
2023-03-01 15:29:20,423:INFO:Starting cross validation
2023-03-01 15:29:20,423:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:20,768:INFO:Calculating mean and std
2023-03-01 15:29:20,770:INFO:Creating metrics dataframe
2023-03-01 15:29:20,773:INFO:Uploading results into container
2023-03-01 15:29:20,774:INFO:Uploading model into container now
2023-03-01 15:29:20,774:INFO:_master_model_container: 11
2023-03-01 15:29:20,775:INFO:_display_container: 2
2023-03-01 15:29:20,775:INFO:KNeighborsRegressor(n_jobs=-1)
2023-03-01 15:29:20,775:INFO:create_model() successfully completed......................................
2023-03-01 15:29:20,874:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:20,874:INFO:Creating metrics dataframe
2023-03-01 15:29:20,886:INFO:Initializing Decision Tree Regressor
2023-03-01 15:29:20,886:INFO:Total runtime is 0.3025889356931051 minutes
2023-03-01 15:29:20,890:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:20,891:INFO:Initializing create_model()
2023-03-01 15:29:20,891:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:20,891:INFO:Checking exceptions
2023-03-01 15:29:20,891:INFO:Importing libraries
2023-03-01 15:29:20,891:INFO:Copying training dataset
2023-03-01 15:29:20,901:INFO:Defining folds
2023-03-01 15:29:20,902:INFO:Declaring metric variables
2023-03-01 15:29:20,906:INFO:Importing untrained model
2023-03-01 15:29:20,910:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:29:20,918:INFO:Starting cross validation
2023-03-01 15:29:20,919:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:21,209:INFO:Calculating mean and std
2023-03-01 15:29:21,211:INFO:Creating metrics dataframe
2023-03-01 15:29:21,215:INFO:Uploading results into container
2023-03-01 15:29:21,216:INFO:Uploading model into container now
2023-03-01 15:29:21,217:INFO:_master_model_container: 12
2023-03-01 15:29:21,217:INFO:_display_container: 2
2023-03-01 15:29:21,218:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:29:21,218:INFO:create_model() successfully completed......................................
2023-03-01 15:29:21,329:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:21,329:INFO:Creating metrics dataframe
2023-03-01 15:29:21,344:INFO:Initializing Random Forest Regressor
2023-03-01 15:29:21,345:INFO:Total runtime is 0.31023561557133994 minutes
2023-03-01 15:29:21,348:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:21,349:INFO:Initializing create_model()
2023-03-01 15:29:21,349:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:21,349:INFO:Checking exceptions
2023-03-01 15:29:21,349:INFO:Importing libraries
2023-03-01 15:29:21,350:INFO:Copying training dataset
2023-03-01 15:29:21,363:INFO:Defining folds
2023-03-01 15:29:21,363:INFO:Declaring metric variables
2023-03-01 15:29:21,366:INFO:Importing untrained model
2023-03-01 15:29:21,370:INFO:Random Forest Regressor Imported successfully
2023-03-01 15:29:21,377:INFO:Starting cross validation
2023-03-01 15:29:21,378:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:24,670:INFO:Calculating mean and std
2023-03-01 15:29:24,672:INFO:Creating metrics dataframe
2023-03-01 15:29:24,676:INFO:Uploading results into container
2023-03-01 15:29:24,676:INFO:Uploading model into container now
2023-03-01 15:29:24,678:INFO:_master_model_container: 13
2023-03-01 15:29:24,678:INFO:_display_container: 2
2023-03-01 15:29:24,679:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-03-01 15:29:24,679:INFO:create_model() successfully completed......................................
2023-03-01 15:29:24,795:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:24,795:INFO:Creating metrics dataframe
2023-03-01 15:29:24,809:INFO:Initializing Extra Trees Regressor
2023-03-01 15:29:24,810:INFO:Total runtime is 0.36798443396886193 minutes
2023-03-01 15:29:24,813:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:24,814:INFO:Initializing create_model()
2023-03-01 15:29:24,814:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:24,814:INFO:Checking exceptions
2023-03-01 15:29:24,814:INFO:Importing libraries
2023-03-01 15:29:24,814:INFO:Copying training dataset
2023-03-01 15:29:24,827:INFO:Defining folds
2023-03-01 15:29:24,827:INFO:Declaring metric variables
2023-03-01 15:29:24,831:INFO:Importing untrained model
2023-03-01 15:29:24,836:INFO:Extra Trees Regressor Imported successfully
2023-03-01 15:29:24,846:INFO:Starting cross validation
2023-03-01 15:29:24,848:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:27,727:INFO:Calculating mean and std
2023-03-01 15:29:27,730:INFO:Creating metrics dataframe
2023-03-01 15:29:27,735:INFO:Uploading results into container
2023-03-01 15:29:27,736:INFO:Uploading model into container now
2023-03-01 15:29:27,737:INFO:_master_model_container: 14
2023-03-01 15:29:27,737:INFO:_display_container: 2
2023-03-01 15:29:27,737:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-03-01 15:29:27,738:INFO:create_model() successfully completed......................................
2023-03-01 15:29:27,850:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:27,850:INFO:Creating metrics dataframe
2023-03-01 15:29:27,866:INFO:Initializing AdaBoost Regressor
2023-03-01 15:29:27,866:INFO:Total runtime is 0.41892305215199793 minutes
2023-03-01 15:29:27,870:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:27,871:INFO:Initializing create_model()
2023-03-01 15:29:27,871:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:27,871:INFO:Checking exceptions
2023-03-01 15:29:27,871:INFO:Importing libraries
2023-03-01 15:29:27,872:INFO:Copying training dataset
2023-03-01 15:29:27,886:INFO:Defining folds
2023-03-01 15:29:27,886:INFO:Declaring metric variables
2023-03-01 15:29:27,890:INFO:Importing untrained model
2023-03-01 15:29:27,895:INFO:AdaBoost Regressor Imported successfully
2023-03-01 15:29:27,903:INFO:Starting cross validation
2023-03-01 15:29:27,904:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:30,053:INFO:Calculating mean and std
2023-03-01 15:29:30,054:INFO:Creating metrics dataframe
2023-03-01 15:29:30,058:INFO:Uploading results into container
2023-03-01 15:29:30,058:INFO:Uploading model into container now
2023-03-01 15:29:30,059:INFO:_master_model_container: 15
2023-03-01 15:29:30,059:INFO:_display_container: 2
2023-03-01 15:29:30,059:INFO:AdaBoostRegressor(random_state=1)
2023-03-01 15:29:30,059:INFO:create_model() successfully completed......................................
2023-03-01 15:29:30,160:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:30,160:INFO:Creating metrics dataframe
2023-03-01 15:29:30,179:INFO:Initializing Gradient Boosting Regressor
2023-03-01 15:29:30,179:INFO:Total runtime is 0.4574733138084412 minutes
2023-03-01 15:29:30,186:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:30,186:INFO:Initializing create_model()
2023-03-01 15:29:30,186:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:30,187:INFO:Checking exceptions
2023-03-01 15:29:30,187:INFO:Importing libraries
2023-03-01 15:29:30,187:INFO:Copying training dataset
2023-03-01 15:29:30,215:INFO:Defining folds
2023-03-01 15:29:30,215:INFO:Declaring metric variables
2023-03-01 15:29:30,223:INFO:Importing untrained model
2023-03-01 15:29:30,231:INFO:Gradient Boosting Regressor Imported successfully
2023-03-01 15:29:30,240:INFO:Starting cross validation
2023-03-01 15:29:30,241:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:32,706:INFO:Calculating mean and std
2023-03-01 15:29:32,708:INFO:Creating metrics dataframe
2023-03-01 15:29:32,711:INFO:Uploading results into container
2023-03-01 15:29:32,711:INFO:Uploading model into container now
2023-03-01 15:29:32,712:INFO:_master_model_container: 16
2023-03-01 15:29:32,712:INFO:_display_container: 2
2023-03-01 15:29:32,712:INFO:GradientBoostingRegressor(random_state=1)
2023-03-01 15:29:32,712:INFO:create_model() successfully completed......................................
2023-03-01 15:29:32,807:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:32,807:INFO:Creating metrics dataframe
2023-03-01 15:29:32,825:INFO:Initializing Light Gradient Boosting Machine
2023-03-01 15:29:32,825:INFO:Total runtime is 0.5015783508618673 minutes
2023-03-01 15:29:32,831:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:32,831:INFO:Initializing create_model()
2023-03-01 15:29:32,831:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:32,832:INFO:Checking exceptions
2023-03-01 15:29:32,832:INFO:Importing libraries
2023-03-01 15:29:32,833:INFO:Copying training dataset
2023-03-01 15:29:32,845:INFO:Defining folds
2023-03-01 15:29:32,846:INFO:Declaring metric variables
2023-03-01 15:29:32,849:INFO:Importing untrained model
2023-03-01 15:29:32,854:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-01 15:29:32,861:INFO:Starting cross validation
2023-03-01 15:29:32,863:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:35,407:INFO:Calculating mean and std
2023-03-01 15:29:35,409:INFO:Creating metrics dataframe
2023-03-01 15:29:35,412:INFO:Uploading results into container
2023-03-01 15:29:35,413:INFO:Uploading model into container now
2023-03-01 15:29:35,413:INFO:_master_model_container: 17
2023-03-01 15:29:35,414:INFO:_display_container: 2
2023-03-01 15:29:35,414:INFO:LGBMRegressor(random_state=1)
2023-03-01 15:29:35,414:INFO:create_model() successfully completed......................................
2023-03-01 15:29:35,520:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:35,520:INFO:Creating metrics dataframe
2023-03-01 15:29:35,538:INFO:Initializing Dummy Regressor
2023-03-01 15:29:35,538:INFO:Total runtime is 0.5467910488446553 minutes
2023-03-01 15:29:35,542:INFO:SubProcess create_model() called ==================================
2023-03-01 15:29:35,543:INFO:Initializing create_model()
2023-03-01 15:29:35,543:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ef9c820>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:35,543:INFO:Checking exceptions
2023-03-01 15:29:35,544:INFO:Importing libraries
2023-03-01 15:29:35,544:INFO:Copying training dataset
2023-03-01 15:29:35,557:INFO:Defining folds
2023-03-01 15:29:35,558:INFO:Declaring metric variables
2023-03-01 15:29:35,561:INFO:Importing untrained model
2023-03-01 15:29:35,566:INFO:Dummy Regressor Imported successfully
2023-03-01 15:29:35,575:INFO:Starting cross validation
2023-03-01 15:29:35,576:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:29:35,813:INFO:Calculating mean and std
2023-03-01 15:29:35,815:INFO:Creating metrics dataframe
2023-03-01 15:29:35,819:INFO:Uploading results into container
2023-03-01 15:29:35,819:INFO:Uploading model into container now
2023-03-01 15:29:35,820:INFO:_master_model_container: 18
2023-03-01 15:29:35,820:INFO:_display_container: 2
2023-03-01 15:29:35,820:INFO:DummyRegressor()
2023-03-01 15:29:35,820:INFO:create_model() successfully completed......................................
2023-03-01 15:29:35,918:INFO:SubProcess create_model() end ==================================
2023-03-01 15:29:35,918:INFO:Creating metrics dataframe
2023-03-01 15:29:35,948:INFO:Initializing create_model()
2023-03-01 15:29:35,948:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=DecisionTreeRegressor(random_state=1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:29:35,948:INFO:Checking exceptions
2023-03-01 15:29:35,950:INFO:Importing libraries
2023-03-01 15:29:35,951:INFO:Copying training dataset
2023-03-01 15:29:35,961:INFO:Defining folds
2023-03-01 15:29:35,961:INFO:Declaring metric variables
2023-03-01 15:29:35,961:INFO:Importing untrained model
2023-03-01 15:29:35,961:INFO:Declaring custom model
2023-03-01 15:29:35,962:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:29:35,962:INFO:Cross validation set to False
2023-03-01 15:29:35,962:INFO:Fitting Model
2023-03-01 15:29:36,003:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:29:36,003:INFO:create_model() successfully completed......................................
2023-03-01 15:29:36,164:INFO:_master_model_container: 18
2023-03-01 15:29:36,164:INFO:_display_container: 2
2023-03-01 15:29:36,164:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:29:36,164:INFO:compare_models() successfully completed......................................
2023-03-01 15:30:06,814:INFO:Initializing create_model()
2023-03-01 15:30:06,814:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:30:06,815:INFO:Checking exceptions
2023-03-01 15:30:06,870:INFO:Importing libraries
2023-03-01 15:30:06,871:INFO:Copying training dataset
2023-03-01 15:30:06,896:INFO:Defining folds
2023-03-01 15:30:06,896:INFO:Declaring metric variables
2023-03-01 15:30:06,903:INFO:Importing untrained model
2023-03-01 15:30:06,908:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:30:06,918:INFO:Starting cross validation
2023-03-01 15:30:06,919:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:30:07,202:INFO:Calculating mean and std
2023-03-01 15:30:07,202:INFO:Creating metrics dataframe
2023-03-01 15:30:07,208:INFO:Finalizing model
2023-03-01 15:30:07,256:INFO:Uploading results into container
2023-03-01 15:30:07,257:INFO:Uploading model into container now
2023-03-01 15:30:07,267:INFO:_master_model_container: 19
2023-03-01 15:30:07,267:INFO:_display_container: 3
2023-03-01 15:30:07,267:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:30:07,267:INFO:create_model() successfully completed......................................
2023-03-01 15:30:33,127:INFO:Initializing create_model()
2023-03-01 15:30:33,128:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:30:33,129:INFO:Checking exceptions
2023-03-01 15:30:33,157:INFO:Importing libraries
2023-03-01 15:30:33,157:INFO:Copying training dataset
2023-03-01 15:30:33,169:INFO:Defining folds
2023-03-01 15:30:33,169:INFO:Declaring metric variables
2023-03-01 15:30:33,172:INFO:Importing untrained model
2023-03-01 15:30:33,176:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:30:33,183:INFO:Starting cross validation
2023-03-01 15:30:33,184:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:30:33,457:INFO:Calculating mean and std
2023-03-01 15:30:33,458:INFO:Creating metrics dataframe
2023-03-01 15:30:33,462:INFO:Finalizing model
2023-03-01 15:30:33,507:INFO:Uploading results into container
2023-03-01 15:30:33,508:INFO:Uploading model into container now
2023-03-01 15:30:33,518:INFO:_master_model_container: 20
2023-03-01 15:30:33,518:INFO:_display_container: 4
2023-03-01 15:30:33,519:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:30:33,519:INFO:create_model() successfully completed......................................
2023-03-01 15:30:33,625:INFO:Initializing plot_model()
2023-03-01 15:30:33,625:INFO:plot_model(plot=auc, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=DecisionTreeRegressor(random_state=1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, system=True)
2023-03-01 15:30:33,625:INFO:Checking exceptions
2023-03-01 15:30:45,004:INFO:Initializing create_model()
2023-03-01 15:30:45,005:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:30:45,006:INFO:Checking exceptions
2023-03-01 15:30:45,034:INFO:Importing libraries
2023-03-01 15:30:45,034:INFO:Copying training dataset
2023-03-01 15:30:45,047:INFO:Defining folds
2023-03-01 15:30:45,048:INFO:Declaring metric variables
2023-03-01 15:30:45,051:INFO:Importing untrained model
2023-03-01 15:30:45,055:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:30:45,062:INFO:Starting cross validation
2023-03-01 15:30:45,063:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:30:45,315:INFO:Calculating mean and std
2023-03-01 15:30:45,315:INFO:Creating metrics dataframe
2023-03-01 15:30:45,320:INFO:Finalizing model
2023-03-01 15:30:45,368:INFO:Uploading results into container
2023-03-01 15:30:45,369:INFO:Uploading model into container now
2023-03-01 15:30:45,378:INFO:_master_model_container: 21
2023-03-01 15:30:45,378:INFO:_display_container: 5
2023-03-01 15:30:45,379:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:30:45,379:INFO:create_model() successfully completed......................................
2023-03-01 15:30:45,484:INFO:Initializing plot_model()
2023-03-01 15:30:45,485:INFO:plot_model(plot=, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=DecisionTreeRegressor(random_state=1), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, system=True)
2023-03-01 15:30:45,485:INFO:Checking exceptions
2023-03-01 15:31:53,253:INFO:Initializing create_model()
2023-03-01 15:31:53,254:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:31:53,255:INFO:Checking exceptions
2023-03-01 15:31:53,301:INFO:Importing libraries
2023-03-01 15:31:53,301:INFO:Copying training dataset
2023-03-01 15:31:53,319:INFO:Defining folds
2023-03-01 15:31:53,319:INFO:Declaring metric variables
2023-03-01 15:31:53,324:INFO:Importing untrained model
2023-03-01 15:31:53,333:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:31:53,366:INFO:Starting cross validation
2023-03-01 15:31:53,369:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:31:53,690:INFO:Calculating mean and std
2023-03-01 15:31:53,690:INFO:Creating metrics dataframe
2023-03-01 15:31:53,698:INFO:Finalizing model
2023-03-01 15:31:53,751:INFO:Uploading results into container
2023-03-01 15:31:53,752:INFO:Uploading model into container now
2023-03-01 15:31:53,766:INFO:_master_model_container: 22
2023-03-01 15:31:53,766:INFO:_display_container: 6
2023-03-01 15:31:53,767:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:31:53,767:INFO:create_model() successfully completed......................................
2023-03-01 15:33:59,770:INFO:Initializing create_model()
2023-03-01 15:33:59,771:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff084571b50>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:33:59,771:INFO:Checking exceptions
2023-03-01 15:33:59,810:INFO:Importing libraries
2023-03-01 15:33:59,811:INFO:Copying training dataset
2023-03-01 15:33:59,833:INFO:Defining folds
2023-03-01 15:33:59,833:INFO:Declaring metric variables
2023-03-01 15:33:59,843:INFO:Importing untrained model
2023-03-01 15:33:59,848:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:33:59,859:INFO:Starting cross validation
2023-03-01 15:33:59,862:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:34:00,127:INFO:Calculating mean and std
2023-03-01 15:34:00,128:INFO:Creating metrics dataframe
2023-03-01 15:34:00,133:INFO:Finalizing model
2023-03-01 15:34:00,179:INFO:Uploading results into container
2023-03-01 15:34:00,180:INFO:Uploading model into container now
2023-03-01 15:34:00,191:INFO:_master_model_container: 23
2023-03-01 15:34:00,191:INFO:_display_container: 7
2023-03-01 15:34:00,191:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:34:00,191:INFO:create_model() successfully completed......................................
2023-03-01 15:42:21,296:INFO:PyCaret RegressionExperiment
2023-03-01 15:42:21,297:INFO:Logging name: reg-default-name
2023-03-01 15:42:21,297:INFO:ML Usecase: MLUsecase.REGRESSION
2023-03-01 15:42:21,297:INFO:version 3.0.0.rc9
2023-03-01 15:42:21,297:INFO:Initializing setup()
2023-03-01 15:42:21,297:INFO:self.USI: 0538
2023-03-01 15:42:21,297:INFO:self._variable_keys: {'pipeline', 'log_plots_param', 'gpu_param', 'fold_groups_param', 'data', 'fold_generator', 'logging_param', 'exp_id', 'USI', 'X_train', 'target_param', 'gpu_n_jobs_param', 'X', 'html_param', 'y', 'idx', 'transform_target_param', 'n_jobs_param', 'memory', 'y_train', 'X_test', '_available_plots', 'y_test', 'seed', 'exp_name_log', 'fold_shuffle_param', '_ml_usecase'}
2023-03-01 15:42:21,297:INFO:Checking environment
2023-03-01 15:42:21,297:INFO:python_version: 3.9.13
2023-03-01 15:42:21,297:INFO:python_build: ('main', 'Aug 25 2022 18:29:29')
2023-03-01 15:42:21,297:INFO:machine: x86_64
2023-03-01 15:42:21,297:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-03-01 15:42:21,298:INFO:Memory: svmem(total=8589934592, available=2982498304, percent=65.3, used=4508852224, free=640454656, active=2342739968, inactive=2326487040, wired=2166112256)
2023-03-01 15:42:21,298:INFO:Physical Core: 4
2023-03-01 15:42:21,298:INFO:Logical Core: 8
2023-03-01 15:42:21,298:INFO:Checking libraries
2023-03-01 15:42:21,298:INFO:System:
2023-03-01 15:42:21,298:INFO:    python: 3.9.13 (main, Aug 25 2022, 18:29:29)  [Clang 12.0.0 ]
2023-03-01 15:42:21,298:INFO:executable: /Users/jorgefreire/opt/anaconda3/bin/python
2023-03-01 15:42:21,298:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-03-01 15:42:21,298:INFO:PyCaret required dependencies:
2023-03-01 15:42:21,298:INFO:                 pip: 22.2.2
2023-03-01 15:42:21,298:INFO:          setuptools: 63.4.1
2023-03-01 15:42:21,298:INFO:             pycaret: 3.0.0rc9
2023-03-01 15:42:21,298:INFO:             IPython: 7.31.1
2023-03-01 15:42:21,298:INFO:          ipywidgets: 7.6.5
2023-03-01 15:42:21,298:INFO:                tqdm: 4.64.1
2023-03-01 15:42:21,298:INFO:               numpy: 1.21.6
2023-03-01 15:42:21,298:INFO:              pandas: 1.5.3
2023-03-01 15:42:21,298:INFO:              jinja2: 3.1.2
2023-03-01 15:42:21,298:INFO:               scipy: 1.9.1
2023-03-01 15:42:21,298:INFO:              joblib: 1.2.0
2023-03-01 15:42:21,298:INFO:             sklearn: 1.0.2
2023-03-01 15:42:21,298:INFO:                pyod: 1.0.7
2023-03-01 15:42:21,299:INFO:            imblearn: 0.10.1
2023-03-01 15:42:21,299:INFO:   category_encoders: 2.6.0
2023-03-01 15:42:21,299:INFO:            lightgbm: 3.3.5
2023-03-01 15:42:21,299:INFO:               numba: 0.55.1
2023-03-01 15:42:21,299:INFO:            requests: 2.28.1
2023-03-01 15:42:21,299:INFO:          matplotlib: 3.5.2
2023-03-01 15:42:21,299:INFO:          scikitplot: 0.3.7
2023-03-01 15:42:21,299:INFO:         yellowbrick: 1.5
2023-03-01 15:42:21,299:INFO:              plotly: 5.9.0
2023-03-01 15:42:21,299:INFO:             kaleido: 0.2.1
2023-03-01 15:42:21,299:INFO:         statsmodels: 0.13.2
2023-03-01 15:42:21,299:INFO:              sktime: 0.16.1
2023-03-01 15:42:21,299:INFO:               tbats: 1.1.2
2023-03-01 15:42:21,299:INFO:            pmdarima: 2.0.2
2023-03-01 15:42:21,299:INFO:              psutil: 5.9.0
2023-03-01 15:42:21,299:INFO:PyCaret optional dependencies:
2023-03-01 15:42:21,299:INFO:                shap: Not installed
2023-03-01 15:42:21,299:INFO:           interpret: Not installed
2023-03-01 15:42:21,299:INFO:                umap: Not installed
2023-03-01 15:42:21,299:INFO:    pandas_profiling: Not installed
2023-03-01 15:42:21,299:INFO:  explainerdashboard: Not installed
2023-03-01 15:42:21,299:INFO:             autoviz: Not installed
2023-03-01 15:42:21,299:INFO:           fairlearn: Not installed
2023-03-01 15:42:21,299:INFO:             xgboost: Not installed
2023-03-01 15:42:21,299:INFO:            catboost: Not installed
2023-03-01 15:42:21,299:INFO:              kmodes: Not installed
2023-03-01 15:42:21,300:INFO:             mlxtend: Not installed
2023-03-01 15:42:21,300:INFO:       statsforecast: Not installed
2023-03-01 15:42:21,300:INFO:        tune_sklearn: Not installed
2023-03-01 15:42:21,300:INFO:                 ray: Not installed
2023-03-01 15:42:21,300:INFO:            hyperopt: Not installed
2023-03-01 15:42:21,300:INFO:              optuna: Not installed
2023-03-01 15:42:21,300:INFO:               skopt: Not installed
2023-03-01 15:42:21,300:INFO:              mlflow: Not installed
2023-03-01 15:42:21,300:INFO:              gradio: Not installed
2023-03-01 15:42:21,300:INFO:             fastapi: 0.90.0
2023-03-01 15:42:21,300:INFO:             uvicorn: 0.20.0
2023-03-01 15:42:21,300:INFO:              m2cgen: Not installed
2023-03-01 15:42:21,300:INFO:           evidently: Not installed
2023-03-01 15:42:21,300:INFO:               fugue: Not installed
2023-03-01 15:42:21,300:INFO:           streamlit: Not installed
2023-03-01 15:42:21,300:INFO:             prophet: Not installed
2023-03-01 15:42:21,300:INFO:None
2023-03-01 15:42:21,300:INFO:Set up data.
2023-03-01 15:42:21,311:INFO:Set up train/test split.
2023-03-01 15:42:21,317:INFO:Set up index.
2023-03-01 15:42:21,317:INFO:Set up folding strategy.
2023-03-01 15:42:21,317:INFO:Assigning column types.
2023-03-01 15:42:21,321:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-01 15:42:21,321:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,327:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,332:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,417:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,479:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,480:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,481:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,481:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,486:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,491:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,557:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,604:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,604:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,604:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,605:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-03-01 15:42:21,610:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,614:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,673:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,719:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,719:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,720:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,724:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,729:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,792:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,841:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,841:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,841:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,842:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-03-01 15:42:21,851:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,916:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,965:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:42:21,966:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,966:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:21,975:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,038:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,086:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,086:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,086:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,087:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-03-01 15:42:22,159:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,204:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,205:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,205:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,276:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,337:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,338:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,338:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,338:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-01 15:42:22,419:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,473:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,473:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,551:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:42:22,597:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,597:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,598:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-03-01 15:42:22,751:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,751:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,880:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,880:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:22,881:INFO:Preparing preprocessing pipeline...
2023-03-01 15:42:22,882:INFO:Set up column name cleaning.
2023-03-01 15:42:22,882:INFO:Set up simple imputation.
2023-03-01 15:42:22,905:INFO:Finished creating preprocessing pipeline.
2023-03-01 15:42:22,911:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/6l/31x7hhz57xx8r01s93tx63f00000gn/T/joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['0', '1', '2', '3', '4'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-03-01 15:42:22,911:INFO:Creating final display dataframe.
2023-03-01 15:42:23,070:INFO:Setup _display_container:                     Description                    Value
0                    Session id                        1
1                        Target  CO2 Emission Grams/Mile
2                   Target type               Regression
3           Original data shape               (35952, 6)
4        Transformed data shape               (35952, 6)
5   Transformed train set shape               (25166, 6)
6    Transformed test set shape               (10786, 6)
7              Numeric features                        5
8                    Preprocess                     True
9               Imputation type                   simple
10           Numeric imputation                     mean
11       Categorical imputation                     mode
12               Fold Generator                    KFold
13                  Fold Number                       10
14                     CPU Jobs                       -1
15                      Use GPU                    False
16               Log Experiment                    False
17              Experiment Name         reg-default-name
18                          USI                     0538
2023-03-01 15:42:23,275:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:23,275:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:23,396:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:23,396:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:42:23,397:INFO:setup() successfully completed in 2.1s...............
2023-03-01 15:42:23,398:INFO:Initializing compare_models()
2023-03-01 15:42:23,398:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-03-01 15:42:23,398:INFO:Checking exceptions
2023-03-01 15:42:23,402:INFO:Preparing display monitor
2023-03-01 15:42:23,442:INFO:Initializing Linear Regression
2023-03-01 15:42:23,442:INFO:Total runtime is 5.53131103515625e-06 minutes
2023-03-01 15:42:23,445:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:23,445:INFO:Initializing create_model()
2023-03-01 15:42:23,446:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:23,446:INFO:Checking exceptions
2023-03-01 15:42:23,446:INFO:Importing libraries
2023-03-01 15:42:23,446:INFO:Copying training dataset
2023-03-01 15:42:23,459:INFO:Defining folds
2023-03-01 15:42:23,459:INFO:Declaring metric variables
2023-03-01 15:42:23,462:INFO:Importing untrained model
2023-03-01 15:42:23,466:INFO:Linear Regression Imported successfully
2023-03-01 15:42:23,472:INFO:Starting cross validation
2023-03-01 15:42:23,473:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:35,415:INFO:Calculating mean and std
2023-03-01 15:42:35,418:INFO:Creating metrics dataframe
2023-03-01 15:42:35,423:INFO:Uploading results into container
2023-03-01 15:42:35,424:INFO:Uploading model into container now
2023-03-01 15:42:35,424:INFO:_master_model_container: 1
2023-03-01 15:42:35,424:INFO:_display_container: 2
2023-03-01 15:42:35,425:INFO:LinearRegression(n_jobs=-1)
2023-03-01 15:42:35,425:INFO:create_model() successfully completed......................................
2023-03-01 15:42:35,556:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:35,557:INFO:Creating metrics dataframe
2023-03-01 15:42:35,568:INFO:Initializing Lasso Regression
2023-03-01 15:42:35,569:INFO:Total runtime is 0.20211739540100096 minutes
2023-03-01 15:42:35,574:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:35,574:INFO:Initializing create_model()
2023-03-01 15:42:35,574:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:35,574:INFO:Checking exceptions
2023-03-01 15:42:35,574:INFO:Importing libraries
2023-03-01 15:42:35,574:INFO:Copying training dataset
2023-03-01 15:42:35,587:INFO:Defining folds
2023-03-01 15:42:35,587:INFO:Declaring metric variables
2023-03-01 15:42:35,591:INFO:Importing untrained model
2023-03-01 15:42:35,596:INFO:Lasso Regression Imported successfully
2023-03-01 15:42:35,603:INFO:Starting cross validation
2023-03-01 15:42:35,604:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:35,803:INFO:Calculating mean and std
2023-03-01 15:42:35,805:INFO:Creating metrics dataframe
2023-03-01 15:42:35,808:INFO:Uploading results into container
2023-03-01 15:42:35,809:INFO:Uploading model into container now
2023-03-01 15:42:35,809:INFO:_master_model_container: 2
2023-03-01 15:42:35,809:INFO:_display_container: 2
2023-03-01 15:42:35,809:INFO:Lasso(random_state=1)
2023-03-01 15:42:35,810:INFO:create_model() successfully completed......................................
2023-03-01 15:42:35,905:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:35,905:INFO:Creating metrics dataframe
2023-03-01 15:42:35,917:INFO:Initializing Ridge Regression
2023-03-01 15:42:35,917:INFO:Total runtime is 0.20793031454086303 minutes
2023-03-01 15:42:35,922:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:35,923:INFO:Initializing create_model()
2023-03-01 15:42:35,923:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:35,923:INFO:Checking exceptions
2023-03-01 15:42:35,923:INFO:Importing libraries
2023-03-01 15:42:35,923:INFO:Copying training dataset
2023-03-01 15:42:35,933:INFO:Defining folds
2023-03-01 15:42:35,934:INFO:Declaring metric variables
2023-03-01 15:42:35,938:INFO:Importing untrained model
2023-03-01 15:42:35,941:INFO:Ridge Regression Imported successfully
2023-03-01 15:42:35,948:INFO:Starting cross validation
2023-03-01 15:42:35,949:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:36,171:INFO:Calculating mean and std
2023-03-01 15:42:36,173:INFO:Creating metrics dataframe
2023-03-01 15:42:36,176:INFO:Uploading results into container
2023-03-01 15:42:36,177:INFO:Uploading model into container now
2023-03-01 15:42:36,178:INFO:_master_model_container: 3
2023-03-01 15:42:36,178:INFO:_display_container: 2
2023-03-01 15:42:36,178:INFO:Ridge(random_state=1)
2023-03-01 15:42:36,178:INFO:create_model() successfully completed......................................
2023-03-01 15:42:36,268:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:36,269:INFO:Creating metrics dataframe
2023-03-01 15:42:36,279:INFO:Initializing Elastic Net
2023-03-01 15:42:36,280:INFO:Total runtime is 0.21396544774373372 minutes
2023-03-01 15:42:36,285:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:36,286:INFO:Initializing create_model()
2023-03-01 15:42:36,286:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:36,287:INFO:Checking exceptions
2023-03-01 15:42:36,287:INFO:Importing libraries
2023-03-01 15:42:36,287:INFO:Copying training dataset
2023-03-01 15:42:36,301:INFO:Defining folds
2023-03-01 15:42:36,302:INFO:Declaring metric variables
2023-03-01 15:42:36,307:INFO:Importing untrained model
2023-03-01 15:42:36,317:INFO:Elastic Net Imported successfully
2023-03-01 15:42:36,327:INFO:Starting cross validation
2023-03-01 15:42:36,328:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:36,562:INFO:Calculating mean and std
2023-03-01 15:42:36,563:INFO:Creating metrics dataframe
2023-03-01 15:42:36,566:INFO:Uploading results into container
2023-03-01 15:42:36,567:INFO:Uploading model into container now
2023-03-01 15:42:36,567:INFO:_master_model_container: 4
2023-03-01 15:42:36,567:INFO:_display_container: 2
2023-03-01 15:42:36,568:INFO:ElasticNet(random_state=1)
2023-03-01 15:42:36,568:INFO:create_model() successfully completed......................................
2023-03-01 15:42:36,677:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:36,677:INFO:Creating metrics dataframe
2023-03-01 15:42:36,690:INFO:Initializing Least Angle Regression
2023-03-01 15:42:36,690:INFO:Total runtime is 0.22080476284027098 minutes
2023-03-01 15:42:36,696:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:36,696:INFO:Initializing create_model()
2023-03-01 15:42:36,696:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:36,696:INFO:Checking exceptions
2023-03-01 15:42:36,696:INFO:Importing libraries
2023-03-01 15:42:36,697:INFO:Copying training dataset
2023-03-01 15:42:36,709:INFO:Defining folds
2023-03-01 15:42:36,710:INFO:Declaring metric variables
2023-03-01 15:42:36,714:INFO:Importing untrained model
2023-03-01 15:42:36,721:INFO:Least Angle Regression Imported successfully
2023-03-01 15:42:36,729:INFO:Starting cross validation
2023-03-01 15:42:36,730:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:36,793:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,805:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,822:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,834:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,851:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,866:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,879:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,886:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,894:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,908:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:36,926:INFO:Calculating mean and std
2023-03-01 15:42:36,928:INFO:Creating metrics dataframe
2023-03-01 15:42:36,931:INFO:Uploading results into container
2023-03-01 15:42:36,932:INFO:Uploading model into container now
2023-03-01 15:42:36,932:INFO:_master_model_container: 5
2023-03-01 15:42:36,932:INFO:_display_container: 2
2023-03-01 15:42:36,932:INFO:Lars(random_state=1)
2023-03-01 15:42:36,932:INFO:create_model() successfully completed......................................
2023-03-01 15:42:37,022:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:37,023:INFO:Creating metrics dataframe
2023-03-01 15:42:37,037:INFO:Initializing Lasso Least Angle Regression
2023-03-01 15:42:37,037:INFO:Total runtime is 0.22659043471018472 minutes
2023-03-01 15:42:37,041:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:37,042:INFO:Initializing create_model()
2023-03-01 15:42:37,042:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:37,042:INFO:Checking exceptions
2023-03-01 15:42:37,042:INFO:Importing libraries
2023-03-01 15:42:37,042:INFO:Copying training dataset
2023-03-01 15:42:37,057:INFO:Defining folds
2023-03-01 15:42:37,057:INFO:Declaring metric variables
2023-03-01 15:42:37,064:INFO:Importing untrained model
2023-03-01 15:42:37,069:INFO:Lasso Least Angle Regression Imported successfully
2023-03-01 15:42:37,077:INFO:Starting cross validation
2023-03-01 15:42:37,078:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:37,151:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,167:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,186:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,204:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,218:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,238:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,253:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,266:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,276:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,286:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:42:37,304:INFO:Calculating mean and std
2023-03-01 15:42:37,306:INFO:Creating metrics dataframe
2023-03-01 15:42:37,309:INFO:Uploading results into container
2023-03-01 15:42:37,309:INFO:Uploading model into container now
2023-03-01 15:42:37,310:INFO:_master_model_container: 6
2023-03-01 15:42:37,310:INFO:_display_container: 2
2023-03-01 15:42:37,310:INFO:LassoLars(random_state=1)
2023-03-01 15:42:37,310:INFO:create_model() successfully completed......................................
2023-03-01 15:42:37,405:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:37,405:INFO:Creating metrics dataframe
2023-03-01 15:42:37,418:INFO:Initializing Orthogonal Matching Pursuit
2023-03-01 15:42:37,418:INFO:Total runtime is 0.23293989896774292 minutes
2023-03-01 15:42:37,422:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:37,423:INFO:Initializing create_model()
2023-03-01 15:42:37,423:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:37,423:INFO:Checking exceptions
2023-03-01 15:42:37,423:INFO:Importing libraries
2023-03-01 15:42:37,423:INFO:Copying training dataset
2023-03-01 15:42:37,433:INFO:Defining folds
2023-03-01 15:42:37,433:INFO:Declaring metric variables
2023-03-01 15:42:37,437:INFO:Importing untrained model
2023-03-01 15:42:37,441:INFO:Orthogonal Matching Pursuit Imported successfully
2023-03-01 15:42:37,448:INFO:Starting cross validation
2023-03-01 15:42:37,449:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:37,509:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,523:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,538:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,547:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,569:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,576:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,595:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,605:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,614:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,624:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:42:37,640:INFO:Calculating mean and std
2023-03-01 15:42:37,642:INFO:Creating metrics dataframe
2023-03-01 15:42:37,645:INFO:Uploading results into container
2023-03-01 15:42:37,646:INFO:Uploading model into container now
2023-03-01 15:42:37,647:INFO:_master_model_container: 7
2023-03-01 15:42:37,647:INFO:_display_container: 2
2023-03-01 15:42:37,647:INFO:OrthogonalMatchingPursuit()
2023-03-01 15:42:37,647:INFO:create_model() successfully completed......................................
2023-03-01 15:42:37,738:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:37,738:INFO:Creating metrics dataframe
2023-03-01 15:42:37,752:INFO:Initializing Bayesian Ridge
2023-03-01 15:42:37,752:INFO:Total runtime is 0.2385007659594218 minutes
2023-03-01 15:42:37,757:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:37,757:INFO:Initializing create_model()
2023-03-01 15:42:37,757:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:37,757:INFO:Checking exceptions
2023-03-01 15:42:37,758:INFO:Importing libraries
2023-03-01 15:42:37,758:INFO:Copying training dataset
2023-03-01 15:42:37,768:INFO:Defining folds
2023-03-01 15:42:37,768:INFO:Declaring metric variables
2023-03-01 15:42:37,772:INFO:Importing untrained model
2023-03-01 15:42:37,776:INFO:Bayesian Ridge Imported successfully
2023-03-01 15:42:37,783:INFO:Starting cross validation
2023-03-01 15:42:37,783:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:37,988:INFO:Calculating mean and std
2023-03-01 15:42:37,989:INFO:Creating metrics dataframe
2023-03-01 15:42:37,993:INFO:Uploading results into container
2023-03-01 15:42:37,993:INFO:Uploading model into container now
2023-03-01 15:42:37,994:INFO:_master_model_container: 8
2023-03-01 15:42:37,994:INFO:_display_container: 2
2023-03-01 15:42:37,994:INFO:BayesianRidge()
2023-03-01 15:42:37,994:INFO:create_model() successfully completed......................................
2023-03-01 15:42:38,085:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:38,086:INFO:Creating metrics dataframe
2023-03-01 15:42:38,099:INFO:Initializing Passive Aggressive Regressor
2023-03-01 15:42:38,099:INFO:Total runtime is 0.24429216384887695 minutes
2023-03-01 15:42:38,104:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:38,104:INFO:Initializing create_model()
2023-03-01 15:42:38,104:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:38,104:INFO:Checking exceptions
2023-03-01 15:42:38,104:INFO:Importing libraries
2023-03-01 15:42:38,105:INFO:Copying training dataset
2023-03-01 15:42:38,115:INFO:Defining folds
2023-03-01 15:42:38,115:INFO:Declaring metric variables
2023-03-01 15:42:38,119:INFO:Importing untrained model
2023-03-01 15:42:38,123:INFO:Passive Aggressive Regressor Imported successfully
2023-03-01 15:42:38,130:INFO:Starting cross validation
2023-03-01 15:42:38,131:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:38,382:INFO:Calculating mean and std
2023-03-01 15:42:38,384:INFO:Creating metrics dataframe
2023-03-01 15:42:38,389:INFO:Uploading results into container
2023-03-01 15:42:38,390:INFO:Uploading model into container now
2023-03-01 15:42:38,391:INFO:_master_model_container: 9
2023-03-01 15:42:38,391:INFO:_display_container: 2
2023-03-01 15:42:38,391:INFO:PassiveAggressiveRegressor(random_state=1)
2023-03-01 15:42:38,391:INFO:create_model() successfully completed......................................
2023-03-01 15:42:38,488:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:38,488:INFO:Creating metrics dataframe
2023-03-01 15:42:38,498:INFO:Initializing Huber Regressor
2023-03-01 15:42:38,499:INFO:Total runtime is 0.2509482661883036 minutes
2023-03-01 15:42:38,502:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:38,502:INFO:Initializing create_model()
2023-03-01 15:42:38,502:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:38,503:INFO:Checking exceptions
2023-03-01 15:42:38,503:INFO:Importing libraries
2023-03-01 15:42:38,503:INFO:Copying training dataset
2023-03-01 15:42:38,513:INFO:Defining folds
2023-03-01 15:42:38,513:INFO:Declaring metric variables
2023-03-01 15:42:38,519:INFO:Importing untrained model
2023-03-01 15:42:38,524:INFO:Huber Regressor Imported successfully
2023-03-01 15:42:38,535:INFO:Starting cross validation
2023-03-01 15:42:38,537:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:39,505:INFO:Calculating mean and std
2023-03-01 15:42:39,508:INFO:Creating metrics dataframe
2023-03-01 15:42:39,511:INFO:Uploading results into container
2023-03-01 15:42:39,511:INFO:Uploading model into container now
2023-03-01 15:42:39,512:INFO:_master_model_container: 10
2023-03-01 15:42:39,512:INFO:_display_container: 2
2023-03-01 15:42:39,512:INFO:HuberRegressor()
2023-03-01 15:42:39,512:INFO:create_model() successfully completed......................................
2023-03-01 15:42:39,609:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:39,609:INFO:Creating metrics dataframe
2023-03-01 15:42:39,625:INFO:Initializing K Neighbors Regressor
2023-03-01 15:42:39,625:INFO:Total runtime is 0.2697261134783427 minutes
2023-03-01 15:42:39,630:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:39,630:INFO:Initializing create_model()
2023-03-01 15:42:39,631:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:39,631:INFO:Checking exceptions
2023-03-01 15:42:39,631:INFO:Importing libraries
2023-03-01 15:42:39,631:INFO:Copying training dataset
2023-03-01 15:42:39,642:INFO:Defining folds
2023-03-01 15:42:39,642:INFO:Declaring metric variables
2023-03-01 15:42:39,646:INFO:Importing untrained model
2023-03-01 15:42:39,650:INFO:K Neighbors Regressor Imported successfully
2023-03-01 15:42:39,658:INFO:Starting cross validation
2023-03-01 15:42:39,659:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:39,986:INFO:Calculating mean and std
2023-03-01 15:42:39,988:INFO:Creating metrics dataframe
2023-03-01 15:42:39,991:INFO:Uploading results into container
2023-03-01 15:42:39,992:INFO:Uploading model into container now
2023-03-01 15:42:39,992:INFO:_master_model_container: 11
2023-03-01 15:42:39,992:INFO:_display_container: 2
2023-03-01 15:42:39,992:INFO:KNeighborsRegressor(n_jobs=-1)
2023-03-01 15:42:39,992:INFO:create_model() successfully completed......................................
2023-03-01 15:42:40,088:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:40,088:INFO:Creating metrics dataframe
2023-03-01 15:42:40,103:INFO:Initializing Decision Tree Regressor
2023-03-01 15:42:40,103:INFO:Total runtime is 0.27769521474838255 minutes
2023-03-01 15:42:40,108:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:40,108:INFO:Initializing create_model()
2023-03-01 15:42:40,109:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:40,109:INFO:Checking exceptions
2023-03-01 15:42:40,109:INFO:Importing libraries
2023-03-01 15:42:40,109:INFO:Copying training dataset
2023-03-01 15:42:40,119:INFO:Defining folds
2023-03-01 15:42:40,119:INFO:Declaring metric variables
2023-03-01 15:42:40,123:INFO:Importing untrained model
2023-03-01 15:42:40,127:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:42:40,133:INFO:Starting cross validation
2023-03-01 15:42:40,134:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:40,359:INFO:Calculating mean and std
2023-03-01 15:42:40,361:INFO:Creating metrics dataframe
2023-03-01 15:42:40,364:INFO:Uploading results into container
2023-03-01 15:42:40,364:INFO:Uploading model into container now
2023-03-01 15:42:40,365:INFO:_master_model_container: 12
2023-03-01 15:42:40,365:INFO:_display_container: 2
2023-03-01 15:42:40,365:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:42:40,365:INFO:create_model() successfully completed......................................
2023-03-01 15:42:40,458:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:40,458:INFO:Creating metrics dataframe
2023-03-01 15:42:40,473:INFO:Initializing Random Forest Regressor
2023-03-01 15:42:40,473:INFO:Total runtime is 0.2838601152102152 minutes
2023-03-01 15:42:40,477:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:40,477:INFO:Initializing create_model()
2023-03-01 15:42:40,478:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:40,478:INFO:Checking exceptions
2023-03-01 15:42:40,478:INFO:Importing libraries
2023-03-01 15:42:40,478:INFO:Copying training dataset
2023-03-01 15:42:40,488:INFO:Defining folds
2023-03-01 15:42:40,489:INFO:Declaring metric variables
2023-03-01 15:42:40,492:INFO:Importing untrained model
2023-03-01 15:42:40,497:INFO:Random Forest Regressor Imported successfully
2023-03-01 15:42:40,503:INFO:Starting cross validation
2023-03-01 15:42:40,505:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:43,938:INFO:Calculating mean and std
2023-03-01 15:42:43,940:INFO:Creating metrics dataframe
2023-03-01 15:42:43,944:INFO:Uploading results into container
2023-03-01 15:42:43,945:INFO:Uploading model into container now
2023-03-01 15:42:43,945:INFO:_master_model_container: 13
2023-03-01 15:42:43,946:INFO:_display_container: 2
2023-03-01 15:42:43,946:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-03-01 15:42:43,946:INFO:create_model() successfully completed......................................
2023-03-01 15:42:44,050:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:44,050:INFO:Creating metrics dataframe
2023-03-01 15:42:44,065:INFO:Initializing Extra Trees Regressor
2023-03-01 15:42:44,066:INFO:Total runtime is 0.343732213973999 minutes
2023-03-01 15:42:44,069:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:44,070:INFO:Initializing create_model()
2023-03-01 15:42:44,070:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:44,070:INFO:Checking exceptions
2023-03-01 15:42:44,070:INFO:Importing libraries
2023-03-01 15:42:44,070:INFO:Copying training dataset
2023-03-01 15:42:44,080:INFO:Defining folds
2023-03-01 15:42:44,080:INFO:Declaring metric variables
2023-03-01 15:42:44,084:INFO:Importing untrained model
2023-03-01 15:42:44,088:INFO:Extra Trees Regressor Imported successfully
2023-03-01 15:42:44,095:INFO:Starting cross validation
2023-03-01 15:42:44,096:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:46,802:INFO:Calculating mean and std
2023-03-01 15:42:46,804:INFO:Creating metrics dataframe
2023-03-01 15:42:46,807:INFO:Uploading results into container
2023-03-01 15:42:46,808:INFO:Uploading model into container now
2023-03-01 15:42:46,808:INFO:_master_model_container: 14
2023-03-01 15:42:46,808:INFO:_display_container: 2
2023-03-01 15:42:46,809:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-03-01 15:42:46,809:INFO:create_model() successfully completed......................................
2023-03-01 15:42:46,913:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:46,913:INFO:Creating metrics dataframe
2023-03-01 15:42:46,930:INFO:Initializing AdaBoost Regressor
2023-03-01 15:42:46,930:INFO:Total runtime is 0.3914787491162618 minutes
2023-03-01 15:42:46,935:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:46,936:INFO:Initializing create_model()
2023-03-01 15:42:46,936:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:46,936:INFO:Checking exceptions
2023-03-01 15:42:46,936:INFO:Importing libraries
2023-03-01 15:42:46,936:INFO:Copying training dataset
2023-03-01 15:42:46,948:INFO:Defining folds
2023-03-01 15:42:46,948:INFO:Declaring metric variables
2023-03-01 15:42:46,953:INFO:Importing untrained model
2023-03-01 15:42:46,957:INFO:AdaBoost Regressor Imported successfully
2023-03-01 15:42:46,965:INFO:Starting cross validation
2023-03-01 15:42:46,966:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:49,222:INFO:Calculating mean and std
2023-03-01 15:42:49,223:INFO:Creating metrics dataframe
2023-03-01 15:42:49,227:INFO:Uploading results into container
2023-03-01 15:42:49,227:INFO:Uploading model into container now
2023-03-01 15:42:49,228:INFO:_master_model_container: 15
2023-03-01 15:42:49,228:INFO:_display_container: 2
2023-03-01 15:42:49,228:INFO:AdaBoostRegressor(random_state=1)
2023-03-01 15:42:49,228:INFO:create_model() successfully completed......................................
2023-03-01 15:42:49,348:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:49,348:INFO:Creating metrics dataframe
2023-03-01 15:42:49,365:INFO:Initializing Gradient Boosting Regressor
2023-03-01 15:42:49,365:INFO:Total runtime is 0.43205653031667074 minutes
2023-03-01 15:42:49,371:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:49,372:INFO:Initializing create_model()
2023-03-01 15:42:49,372:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:49,372:INFO:Checking exceptions
2023-03-01 15:42:49,373:INFO:Importing libraries
2023-03-01 15:42:49,373:INFO:Copying training dataset
2023-03-01 15:42:49,385:INFO:Defining folds
2023-03-01 15:42:49,385:INFO:Declaring metric variables
2023-03-01 15:42:49,391:INFO:Importing untrained model
2023-03-01 15:42:49,395:INFO:Gradient Boosting Regressor Imported successfully
2023-03-01 15:42:49,403:INFO:Starting cross validation
2023-03-01 15:42:49,404:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:52,343:INFO:Calculating mean and std
2023-03-01 15:42:52,345:INFO:Creating metrics dataframe
2023-03-01 15:42:52,349:INFO:Uploading results into container
2023-03-01 15:42:52,349:INFO:Uploading model into container now
2023-03-01 15:42:52,350:INFO:_master_model_container: 16
2023-03-01 15:42:52,350:INFO:_display_container: 2
2023-03-01 15:42:52,351:INFO:GradientBoostingRegressor(random_state=1)
2023-03-01 15:42:52,351:INFO:create_model() successfully completed......................................
2023-03-01 15:42:52,463:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:52,463:INFO:Creating metrics dataframe
2023-03-01 15:42:52,479:INFO:Initializing Light Gradient Boosting Machine
2023-03-01 15:42:52,479:INFO:Total runtime is 0.4839531461397807 minutes
2023-03-01 15:42:52,483:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:52,483:INFO:Initializing create_model()
2023-03-01 15:42:52,483:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:52,484:INFO:Checking exceptions
2023-03-01 15:42:52,484:INFO:Importing libraries
2023-03-01 15:42:52,484:INFO:Copying training dataset
2023-03-01 15:42:52,495:INFO:Defining folds
2023-03-01 15:42:52,496:INFO:Declaring metric variables
2023-03-01 15:42:52,500:INFO:Importing untrained model
2023-03-01 15:42:52,506:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-01 15:42:52,514:INFO:Starting cross validation
2023-03-01 15:42:52,515:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:55,258:INFO:Calculating mean and std
2023-03-01 15:42:55,260:INFO:Creating metrics dataframe
2023-03-01 15:42:55,263:INFO:Uploading results into container
2023-03-01 15:42:55,264:INFO:Uploading model into container now
2023-03-01 15:42:55,265:INFO:_master_model_container: 17
2023-03-01 15:42:55,265:INFO:_display_container: 2
2023-03-01 15:42:55,265:INFO:LGBMRegressor(random_state=1)
2023-03-01 15:42:55,265:INFO:create_model() successfully completed......................................
2023-03-01 15:42:55,361:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:55,361:INFO:Creating metrics dataframe
2023-03-01 15:42:55,379:INFO:Initializing Dummy Regressor
2023-03-01 15:42:55,379:INFO:Total runtime is 0.5322978615760803 minutes
2023-03-01 15:42:55,384:INFO:SubProcess create_model() called ==================================
2023-03-01 15:42:55,384:INFO:Initializing create_model()
2023-03-01 15:42:55,385:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff06ed8d340>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:55,385:INFO:Checking exceptions
2023-03-01 15:42:55,385:INFO:Importing libraries
2023-03-01 15:42:55,386:INFO:Copying training dataset
2023-03-01 15:42:55,397:INFO:Defining folds
2023-03-01 15:42:55,397:INFO:Declaring metric variables
2023-03-01 15:42:55,401:INFO:Importing untrained model
2023-03-01 15:42:55,405:INFO:Dummy Regressor Imported successfully
2023-03-01 15:42:55,413:INFO:Starting cross validation
2023-03-01 15:42:55,414:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:42:55,642:INFO:Calculating mean and std
2023-03-01 15:42:55,644:INFO:Creating metrics dataframe
2023-03-01 15:42:55,647:INFO:Uploading results into container
2023-03-01 15:42:55,648:INFO:Uploading model into container now
2023-03-01 15:42:55,648:INFO:_master_model_container: 18
2023-03-01 15:42:55,648:INFO:_display_container: 2
2023-03-01 15:42:55,649:INFO:DummyRegressor()
2023-03-01 15:42:55,649:INFO:create_model() successfully completed......................................
2023-03-01 15:42:55,750:INFO:SubProcess create_model() end ==================================
2023-03-01 15:42:55,750:INFO:Creating metrics dataframe
2023-03-01 15:42:55,777:INFO:Initializing create_model()
2023-03-01 15:42:55,778:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=DecisionTreeRegressor(random_state=1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:42:55,778:INFO:Checking exceptions
2023-03-01 15:42:55,780:INFO:Importing libraries
2023-03-01 15:42:55,780:INFO:Copying training dataset
2023-03-01 15:42:55,788:INFO:Defining folds
2023-03-01 15:42:55,788:INFO:Declaring metric variables
2023-03-01 15:42:55,789:INFO:Importing untrained model
2023-03-01 15:42:55,789:INFO:Declaring custom model
2023-03-01 15:42:55,789:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:42:55,790:INFO:Cross validation set to False
2023-03-01 15:42:55,790:INFO:Fitting Model
2023-03-01 15:42:55,828:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:42:55,828:INFO:create_model() successfully completed......................................
2023-03-01 15:42:55,995:INFO:_master_model_container: 18
2023-03-01 15:42:55,996:INFO:_display_container: 2
2023-03-01 15:42:55,997:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:42:55,998:INFO:compare_models() successfully completed......................................
2023-03-01 15:43:09,552:INFO:Initializing create_model()
2023-03-01 15:43:09,553:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7ff06ec22070>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:43:09,554:INFO:Checking exceptions
2023-03-01 15:43:09,583:INFO:Importing libraries
2023-03-01 15:43:09,583:INFO:Copying training dataset
2023-03-01 15:43:09,594:INFO:Defining folds
2023-03-01 15:43:09,594:INFO:Declaring metric variables
2023-03-01 15:43:09,598:INFO:Importing untrained model
2023-03-01 15:43:09,602:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:43:09,611:INFO:Starting cross validation
2023-03-01 15:43:09,613:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:43:09,872:INFO:Calculating mean and std
2023-03-01 15:43:09,872:INFO:Creating metrics dataframe
2023-03-01 15:43:09,877:INFO:Finalizing model
2023-03-01 15:43:09,921:INFO:Uploading results into container
2023-03-01 15:43:09,922:INFO:Uploading model into container now
2023-03-01 15:43:09,931:INFO:_master_model_container: 19
2023-03-01 15:43:09,931:INFO:_display_container: 3
2023-03-01 15:43:09,932:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:43:09,932:INFO:create_model() successfully completed......................................
2023-03-01 15:43:42,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 15:43:42,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 15:43:42,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 15:43:42,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-01 15:43:43,285:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-03-01 15:43:43,504:INFO:PyCaret RegressionExperiment
2023-03-01 15:43:43,505:INFO:Logging name: reg-default-name
2023-03-01 15:43:43,505:INFO:ML Usecase: MLUsecase.REGRESSION
2023-03-01 15:43:43,505:INFO:version 3.0.0.rc9
2023-03-01 15:43:43,505:INFO:Initializing setup()
2023-03-01 15:43:43,505:INFO:self.USI: 8799
2023-03-01 15:43:43,505:INFO:self._variable_keys: {'logging_param', 'exp_id', 'X', 'fold_groups_param', 'y_train', 'fold_generator', 'gpu_param', 'idx', 'USI', 'log_plots_param', 'gpu_n_jobs_param', 'y_test', 'memory', 'html_param', 'transform_target_param', '_available_plots', 'exp_name_log', 'seed', 'X_test', 'X_train', 'fold_shuffle_param', 'n_jobs_param', '_ml_usecase', 'target_param', 'data', 'pipeline', 'y'}
2023-03-01 15:43:43,505:INFO:Checking environment
2023-03-01 15:43:43,505:INFO:python_version: 3.9.13
2023-03-01 15:43:43,505:INFO:python_build: ('main', 'Aug 25 2022 18:29:29')
2023-03-01 15:43:43,505:INFO:machine: x86_64
2023-03-01 15:43:43,505:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-03-01 15:43:43,505:INFO:Memory: svmem(total=8589934592, available=3503489024, percent=59.2, used=3772030976, free=1278758912, active=1563324416, inactive=2144497664, wired=2208706560)
2023-03-01 15:43:43,505:INFO:Physical Core: 4
2023-03-01 15:43:43,505:INFO:Logical Core: 8
2023-03-01 15:43:43,505:INFO:Checking libraries
2023-03-01 15:43:43,505:INFO:System:
2023-03-01 15:43:43,505:INFO:    python: 3.9.13 (main, Aug 25 2022, 18:29:29)  [Clang 12.0.0 ]
2023-03-01 15:43:43,505:INFO:executable: /Users/jorgefreire/opt/anaconda3/bin/python
2023-03-01 15:43:43,505:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-03-01 15:43:43,505:INFO:PyCaret required dependencies:
2023-03-01 15:43:43,506:INFO:                 pip: 22.2.2
2023-03-01 15:43:43,506:INFO:          setuptools: 63.4.1
2023-03-01 15:43:43,506:INFO:             pycaret: 3.0.0rc9
2023-03-01 15:43:43,506:INFO:             IPython: 7.31.1
2023-03-01 15:43:43,506:INFO:          ipywidgets: 7.6.5
2023-03-01 15:43:43,506:INFO:                tqdm: 4.64.1
2023-03-01 15:43:43,506:INFO:               numpy: 1.21.6
2023-03-01 15:43:43,506:INFO:              pandas: 1.5.3
2023-03-01 15:43:43,506:INFO:              jinja2: 3.1.2
2023-03-01 15:43:43,506:INFO:               scipy: 1.9.1
2023-03-01 15:43:43,506:INFO:              joblib: 1.2.0
2023-03-01 15:43:43,506:INFO:             sklearn: 1.0.2
2023-03-01 15:43:43,506:INFO:                pyod: 1.0.7
2023-03-01 15:43:43,506:INFO:            imblearn: 0.10.1
2023-03-01 15:43:43,506:INFO:   category_encoders: 2.6.0
2023-03-01 15:43:43,506:INFO:            lightgbm: 3.3.5
2023-03-01 15:43:43,506:INFO:               numba: 0.55.1
2023-03-01 15:43:43,506:INFO:            requests: 2.28.1
2023-03-01 15:43:43,506:INFO:          matplotlib: 3.5.2
2023-03-01 15:43:43,506:INFO:          scikitplot: 0.3.7
2023-03-01 15:43:43,506:INFO:         yellowbrick: 1.5
2023-03-01 15:43:43,506:INFO:              plotly: 5.9.0
2023-03-01 15:43:43,506:INFO:             kaleido: 0.2.1
2023-03-01 15:43:43,506:INFO:         statsmodels: 0.13.2
2023-03-01 15:43:43,506:INFO:              sktime: 0.16.1
2023-03-01 15:43:43,507:INFO:               tbats: 1.1.2
2023-03-01 15:43:43,507:INFO:            pmdarima: 2.0.2
2023-03-01 15:43:43,507:INFO:              psutil: 5.9.0
2023-03-01 15:43:43,507:INFO:PyCaret optional dependencies:
2023-03-01 15:43:43,806:INFO:                shap: Not installed
2023-03-01 15:43:43,806:INFO:           interpret: Not installed
2023-03-01 15:43:43,806:INFO:                umap: Not installed
2023-03-01 15:43:43,806:INFO:    pandas_profiling: Not installed
2023-03-01 15:43:43,806:INFO:  explainerdashboard: Not installed
2023-03-01 15:43:43,806:INFO:             autoviz: Not installed
2023-03-01 15:43:43,806:INFO:           fairlearn: Not installed
2023-03-01 15:43:43,806:INFO:             xgboost: Not installed
2023-03-01 15:43:43,806:INFO:            catboost: Not installed
2023-03-01 15:43:43,806:INFO:              kmodes: Not installed
2023-03-01 15:43:43,806:INFO:             mlxtend: Not installed
2023-03-01 15:43:43,806:INFO:       statsforecast: Not installed
2023-03-01 15:43:43,806:INFO:        tune_sklearn: Not installed
2023-03-01 15:43:43,806:INFO:                 ray: Not installed
2023-03-01 15:43:43,806:INFO:            hyperopt: Not installed
2023-03-01 15:43:43,806:INFO:              optuna: Not installed
2023-03-01 15:43:43,807:INFO:               skopt: Not installed
2023-03-01 15:43:43,807:INFO:              mlflow: Not installed
2023-03-01 15:43:43,807:INFO:              gradio: Not installed
2023-03-01 15:43:43,807:INFO:             fastapi: 0.90.0
2023-03-01 15:43:43,807:INFO:             uvicorn: 0.20.0
2023-03-01 15:43:43,807:INFO:              m2cgen: Not installed
2023-03-01 15:43:43,807:INFO:           evidently: Not installed
2023-03-01 15:43:43,807:INFO:               fugue: Not installed
2023-03-01 15:43:43,807:INFO:           streamlit: Not installed
2023-03-01 15:43:43,807:INFO:             prophet: Not installed
2023-03-01 15:43:43,807:INFO:None
2023-03-01 15:43:43,807:INFO:Set up data.
2023-03-01 15:43:43,818:INFO:Set up train/test split.
2023-03-01 15:43:43,844:INFO:Set up index.
2023-03-01 15:43:43,846:INFO:Set up folding strategy.
2023-03-01 15:43:43,846:INFO:Assigning column types.
2023-03-01 15:43:43,853:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-01 15:43:43,853:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-03-01 15:43:43,859:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:43:43,865:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:43:43,955:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,013:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,014:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,091:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,092:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,098:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,104:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,176:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,226:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,226:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,227:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,227:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-03-01 15:43:44,232:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,237:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,303:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,366:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,367:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,367:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,373:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,381:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,454:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,505:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,506:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,507:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-03-01 15:43:44,518:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,583:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,633:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,634:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,634:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,644:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,716:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,777:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,778:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,778:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,779:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-03-01 15:43:44,863:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,919:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:43:44,919:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:44,919:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,002:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:45,054:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-01 15:43:45,054:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,055:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,055:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-01 15:43:45,135:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:45,187:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,188:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,269:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-03-01 15:43:45,329:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,330:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,330:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-03-01 15:43:45,460:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,460:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,582:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:45,586:INFO:Preparing preprocessing pipeline...
2023-03-01 15:43:45,587:INFO:Set up column name cleaning.
2023-03-01 15:43:45,587:INFO:Set up simple imputation.
2023-03-01 15:43:45,623:INFO:Finished creating preprocessing pipeline.
2023-03-01 15:43:45,630:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/6l/31x7hhz57xx8r01s93tx63f00000gn/T/joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Year', 'Cylinders',
                                             'Fuel Barrels/Year',
                                             'Combined MPG', 'Fuel Cost/Year'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-03-01 15:43:45,630:INFO:Creating final display dataframe.
2023-03-01 15:43:45,856:INFO:Setup _display_container:                     Description                    Value
0                    Session id                        1
1                        Target  CO2 Emission Grams/Mile
2                   Target type               Regression
3           Original data shape               (35952, 6)
4        Transformed data shape               (35952, 6)
5   Transformed train set shape               (25166, 6)
6    Transformed test set shape               (10786, 6)
7              Numeric features                        5
8                    Preprocess                     True
9               Imputation type                   simple
10           Numeric imputation                     mean
11       Categorical imputation                     mode
12               Fold Generator                    KFold
13                  Fold Number                       10
14                     CPU Jobs                       -1
15                      Use GPU                    False
16               Log Experiment                    False
17              Experiment Name         reg-default-name
18                          USI                     8799
2023-03-01 15:43:46,028:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:46,028:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:46,209:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:46,210:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-01 15:43:46,211:INFO:setup() successfully completed in 2.71s...............
2023-03-01 15:43:46,211:INFO:Initializing compare_models()
2023-03-01 15:43:46,211:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-03-01 15:43:46,211:INFO:Checking exceptions
2023-03-01 15:43:46,215:INFO:Preparing display monitor
2023-03-01 15:43:46,290:INFO:Initializing Linear Regression
2023-03-01 15:43:46,291:INFO:Total runtime is 7.931391398111979e-06 minutes
2023-03-01 15:43:46,296:INFO:SubProcess create_model() called ==================================
2023-03-01 15:43:46,297:INFO:Initializing create_model()
2023-03-01 15:43:46,297:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:43:46,297:INFO:Checking exceptions
2023-03-01 15:43:46,297:INFO:Importing libraries
2023-03-01 15:43:46,297:INFO:Copying training dataset
2023-03-01 15:43:46,315:INFO:Defining folds
2023-03-01 15:43:46,315:INFO:Declaring metric variables
2023-03-01 15:43:46,319:INFO:Importing untrained model
2023-03-01 15:43:46,326:INFO:Linear Regression Imported successfully
2023-03-01 15:43:46,343:INFO:Starting cross validation
2023-03-01 15:43:46,355:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:43:55,457:INFO:Calculating mean and std
2023-03-01 15:43:55,460:INFO:Creating metrics dataframe
2023-03-01 15:43:55,469:INFO:Uploading results into container
2023-03-01 15:43:55,470:INFO:Uploading model into container now
2023-03-01 15:43:55,471:INFO:_master_model_container: 1
2023-03-01 15:43:55,471:INFO:_display_container: 2
2023-03-01 15:43:55,472:INFO:LinearRegression(n_jobs=-1)
2023-03-01 15:43:55,472:INFO:create_model() successfully completed......................................
2023-03-01 15:43:55,650:INFO:SubProcess create_model() end ==================================
2023-03-01 15:43:55,651:INFO:Creating metrics dataframe
2023-03-01 15:43:55,664:INFO:Initializing Lasso Regression
2023-03-01 15:43:55,665:INFO:Total runtime is 0.15623875061670942 minutes
2023-03-01 15:43:55,670:INFO:SubProcess create_model() called ==================================
2023-03-01 15:43:55,671:INFO:Initializing create_model()
2023-03-01 15:43:55,671:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:43:55,671:INFO:Checking exceptions
2023-03-01 15:43:55,671:INFO:Importing libraries
2023-03-01 15:43:55,671:INFO:Copying training dataset
2023-03-01 15:43:55,688:INFO:Defining folds
2023-03-01 15:43:55,688:INFO:Declaring metric variables
2023-03-01 15:43:55,694:INFO:Importing untrained model
2023-03-01 15:43:55,700:INFO:Lasso Regression Imported successfully
2023-03-01 15:43:55,710:INFO:Starting cross validation
2023-03-01 15:43:55,711:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:43:59,372:INFO:Calculating mean and std
2023-03-01 15:43:59,373:INFO:Creating metrics dataframe
2023-03-01 15:43:59,377:INFO:Uploading results into container
2023-03-01 15:43:59,377:INFO:Uploading model into container now
2023-03-01 15:43:59,378:INFO:_master_model_container: 2
2023-03-01 15:43:59,378:INFO:_display_container: 2
2023-03-01 15:43:59,379:INFO:Lasso(random_state=1)
2023-03-01 15:43:59,379:INFO:create_model() successfully completed......................................
2023-03-01 15:43:59,479:INFO:SubProcess create_model() end ==================================
2023-03-01 15:43:59,479:INFO:Creating metrics dataframe
2023-03-01 15:43:59,491:INFO:Initializing Ridge Regression
2023-03-01 15:43:59,491:INFO:Total runtime is 0.22001506487528485 minutes
2023-03-01 15:43:59,496:INFO:SubProcess create_model() called ==================================
2023-03-01 15:43:59,496:INFO:Initializing create_model()
2023-03-01 15:43:59,496:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:43:59,496:INFO:Checking exceptions
2023-03-01 15:43:59,497:INFO:Importing libraries
2023-03-01 15:43:59,497:INFO:Copying training dataset
2023-03-01 15:43:59,510:INFO:Defining folds
2023-03-01 15:43:59,510:INFO:Declaring metric variables
2023-03-01 15:43:59,514:INFO:Importing untrained model
2023-03-01 15:43:59,518:INFO:Ridge Regression Imported successfully
2023-03-01 15:43:59,525:INFO:Starting cross validation
2023-03-01 15:43:59,526:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:43:59,768:INFO:Calculating mean and std
2023-03-01 15:43:59,770:INFO:Creating metrics dataframe
2023-03-01 15:43:59,773:INFO:Uploading results into container
2023-03-01 15:43:59,774:INFO:Uploading model into container now
2023-03-01 15:43:59,775:INFO:_master_model_container: 3
2023-03-01 15:43:59,775:INFO:_display_container: 2
2023-03-01 15:43:59,775:INFO:Ridge(random_state=1)
2023-03-01 15:43:59,775:INFO:create_model() successfully completed......................................
2023-03-01 15:43:59,868:INFO:SubProcess create_model() end ==================================
2023-03-01 15:43:59,868:INFO:Creating metrics dataframe
2023-03-01 15:43:59,879:INFO:Initializing Elastic Net
2023-03-01 15:43:59,880:INFO:Total runtime is 0.22648836771647138 minutes
2023-03-01 15:43:59,885:INFO:SubProcess create_model() called ==================================
2023-03-01 15:43:59,885:INFO:Initializing create_model()
2023-03-01 15:43:59,885:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:43:59,885:INFO:Checking exceptions
2023-03-01 15:43:59,886:INFO:Importing libraries
2023-03-01 15:43:59,886:INFO:Copying training dataset
2023-03-01 15:43:59,903:INFO:Defining folds
2023-03-01 15:43:59,904:INFO:Declaring metric variables
2023-03-01 15:43:59,911:INFO:Importing untrained model
2023-03-01 15:43:59,917:INFO:Elastic Net Imported successfully
2023-03-01 15:43:59,925:INFO:Starting cross validation
2023-03-01 15:43:59,926:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:00,165:INFO:Calculating mean and std
2023-03-01 15:44:00,167:INFO:Creating metrics dataframe
2023-03-01 15:44:00,171:INFO:Uploading results into container
2023-03-01 15:44:00,172:INFO:Uploading model into container now
2023-03-01 15:44:00,172:INFO:_master_model_container: 4
2023-03-01 15:44:00,172:INFO:_display_container: 2
2023-03-01 15:44:00,172:INFO:ElasticNet(random_state=1)
2023-03-01 15:44:00,173:INFO:create_model() successfully completed......................................
2023-03-01 15:44:00,287:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:00,287:INFO:Creating metrics dataframe
2023-03-01 15:44:00,301:INFO:Initializing Least Angle Regression
2023-03-01 15:44:00,301:INFO:Total runtime is 0.23351189692815147 minutes
2023-03-01 15:44:00,306:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:00,306:INFO:Initializing create_model()
2023-03-01 15:44:00,306:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:00,306:INFO:Checking exceptions
2023-03-01 15:44:00,307:INFO:Importing libraries
2023-03-01 15:44:00,307:INFO:Copying training dataset
2023-03-01 15:44:00,320:INFO:Defining folds
2023-03-01 15:44:00,321:INFO:Declaring metric variables
2023-03-01 15:44:00,325:INFO:Importing untrained model
2023-03-01 15:44:00,329:INFO:Least Angle Regression Imported successfully
2023-03-01 15:44:00,336:INFO:Starting cross validation
2023-03-01 15:44:00,337:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:00,403:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,419:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,431:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,449:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,460:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,477:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,482:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,504:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,512:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,522:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:00,540:INFO:Calculating mean and std
2023-03-01 15:44:00,542:INFO:Creating metrics dataframe
2023-03-01 15:44:00,546:INFO:Uploading results into container
2023-03-01 15:44:00,547:INFO:Uploading model into container now
2023-03-01 15:44:00,547:INFO:_master_model_container: 5
2023-03-01 15:44:00,547:INFO:_display_container: 2
2023-03-01 15:44:00,548:INFO:Lars(random_state=1)
2023-03-01 15:44:00,548:INFO:create_model() successfully completed......................................
2023-03-01 15:44:00,644:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:00,644:INFO:Creating metrics dataframe
2023-03-01 15:44:00,658:INFO:Initializing Lasso Least Angle Regression
2023-03-01 15:44:00,658:INFO:Total runtime is 0.2394557038942973 minutes
2023-03-01 15:44:00,662:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:00,662:INFO:Initializing create_model()
2023-03-01 15:44:00,662:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:00,662:INFO:Checking exceptions
2023-03-01 15:44:00,663:INFO:Importing libraries
2023-03-01 15:44:00,663:INFO:Copying training dataset
2023-03-01 15:44:00,675:INFO:Defining folds
2023-03-01 15:44:00,675:INFO:Declaring metric variables
2023-03-01 15:44:00,679:INFO:Importing untrained model
2023-03-01 15:44:00,683:INFO:Lasso Least Angle Regression Imported successfully
2023-03-01 15:44:00,690:INFO:Starting cross validation
2023-03-01 15:44:00,691:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:00,755:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,766:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,780:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,803:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,819:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,835:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,844:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,859:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,862:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,873:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-03-01 15:44:00,890:INFO:Calculating mean and std
2023-03-01 15:44:00,892:INFO:Creating metrics dataframe
2023-03-01 15:44:00,896:INFO:Uploading results into container
2023-03-01 15:44:00,897:INFO:Uploading model into container now
2023-03-01 15:44:00,897:INFO:_master_model_container: 6
2023-03-01 15:44:00,897:INFO:_display_container: 2
2023-03-01 15:44:00,898:INFO:LassoLars(random_state=1)
2023-03-01 15:44:00,898:INFO:create_model() successfully completed......................................
2023-03-01 15:44:00,994:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:00,994:INFO:Creating metrics dataframe
2023-03-01 15:44:01,007:INFO:Initializing Orthogonal Matching Pursuit
2023-03-01 15:44:01,007:INFO:Total runtime is 0.24528091748555503 minutes
2023-03-01 15:44:01,011:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:01,011:INFO:Initializing create_model()
2023-03-01 15:44:01,011:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:01,012:INFO:Checking exceptions
2023-03-01 15:44:01,012:INFO:Importing libraries
2023-03-01 15:44:01,012:INFO:Copying training dataset
2023-03-01 15:44:01,023:INFO:Defining folds
2023-03-01 15:44:01,024:INFO:Declaring metric variables
2023-03-01 15:44:01,027:INFO:Importing untrained model
2023-03-01 15:44:01,031:INFO:Orthogonal Matching Pursuit Imported successfully
2023-03-01 15:44:01,038:INFO:Starting cross validation
2023-03-01 15:44:01,039:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:01,101:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,119:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,134:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,153:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,170:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,188:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,196:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,211:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,219:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,233:WARNING:/Users/jorgefreire/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-03-01 15:44:01,250:INFO:Calculating mean and std
2023-03-01 15:44:01,252:INFO:Creating metrics dataframe
2023-03-01 15:44:01,255:INFO:Uploading results into container
2023-03-01 15:44:01,256:INFO:Uploading model into container now
2023-03-01 15:44:01,257:INFO:_master_model_container: 7
2023-03-01 15:44:01,258:INFO:_display_container: 2
2023-03-01 15:44:01,258:INFO:OrthogonalMatchingPursuit()
2023-03-01 15:44:01,258:INFO:create_model() successfully completed......................................
2023-03-01 15:44:01,356:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:01,356:INFO:Creating metrics dataframe
2023-03-01 15:44:01,369:INFO:Initializing Bayesian Ridge
2023-03-01 15:44:01,369:INFO:Total runtime is 0.2513133684794108 minutes
2023-03-01 15:44:01,373:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:01,374:INFO:Initializing create_model()
2023-03-01 15:44:01,374:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:01,374:INFO:Checking exceptions
2023-03-01 15:44:01,374:INFO:Importing libraries
2023-03-01 15:44:01,374:INFO:Copying training dataset
2023-03-01 15:44:01,388:INFO:Defining folds
2023-03-01 15:44:01,388:INFO:Declaring metric variables
2023-03-01 15:44:01,392:INFO:Importing untrained model
2023-03-01 15:44:01,396:INFO:Bayesian Ridge Imported successfully
2023-03-01 15:44:01,403:INFO:Starting cross validation
2023-03-01 15:44:01,404:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:01,615:INFO:Calculating mean and std
2023-03-01 15:44:01,617:INFO:Creating metrics dataframe
2023-03-01 15:44:01,620:INFO:Uploading results into container
2023-03-01 15:44:01,620:INFO:Uploading model into container now
2023-03-01 15:44:01,621:INFO:_master_model_container: 8
2023-03-01 15:44:01,621:INFO:_display_container: 2
2023-03-01 15:44:01,622:INFO:BayesianRidge()
2023-03-01 15:44:01,622:INFO:create_model() successfully completed......................................
2023-03-01 15:44:01,718:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:01,718:INFO:Creating metrics dataframe
2023-03-01 15:44:01,731:INFO:Initializing Passive Aggressive Regressor
2023-03-01 15:44:01,731:INFO:Total runtime is 0.2573472340901693 minutes
2023-03-01 15:44:01,735:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:01,735:INFO:Initializing create_model()
2023-03-01 15:44:01,736:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:01,736:INFO:Checking exceptions
2023-03-01 15:44:01,736:INFO:Importing libraries
2023-03-01 15:44:01,736:INFO:Copying training dataset
2023-03-01 15:44:01,748:INFO:Defining folds
2023-03-01 15:44:01,748:INFO:Declaring metric variables
2023-03-01 15:44:01,752:INFO:Importing untrained model
2023-03-01 15:44:01,756:INFO:Passive Aggressive Regressor Imported successfully
2023-03-01 15:44:01,763:INFO:Starting cross validation
2023-03-01 15:44:01,764:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:02,016:INFO:Calculating mean and std
2023-03-01 15:44:02,018:INFO:Creating metrics dataframe
2023-03-01 15:44:02,022:INFO:Uploading results into container
2023-03-01 15:44:02,023:INFO:Uploading model into container now
2023-03-01 15:44:02,024:INFO:_master_model_container: 9
2023-03-01 15:44:02,024:INFO:_display_container: 2
2023-03-01 15:44:02,025:INFO:PassiveAggressiveRegressor(random_state=1)
2023-03-01 15:44:02,025:INFO:create_model() successfully completed......................................
2023-03-01 15:44:02,127:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:02,127:INFO:Creating metrics dataframe
2023-03-01 15:44:02,140:INFO:Initializing Huber Regressor
2023-03-01 15:44:02,141:INFO:Total runtime is 0.2641698002815247 minutes
2023-03-01 15:44:02,144:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:02,145:INFO:Initializing create_model()
2023-03-01 15:44:02,145:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:02,145:INFO:Checking exceptions
2023-03-01 15:44:02,146:INFO:Importing libraries
2023-03-01 15:44:02,146:INFO:Copying training dataset
2023-03-01 15:44:02,159:INFO:Defining folds
2023-03-01 15:44:02,159:INFO:Declaring metric variables
2023-03-01 15:44:02,164:INFO:Importing untrained model
2023-03-01 15:44:02,170:INFO:Huber Regressor Imported successfully
2023-03-01 15:44:02,177:INFO:Starting cross validation
2023-03-01 15:44:02,178:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:02,412:INFO:Calculating mean and std
2023-03-01 15:44:02,414:INFO:Creating metrics dataframe
2023-03-01 15:44:02,417:INFO:Uploading results into container
2023-03-01 15:44:02,418:INFO:Uploading model into container now
2023-03-01 15:44:02,418:INFO:_master_model_container: 10
2023-03-01 15:44:02,418:INFO:_display_container: 2
2023-03-01 15:44:02,419:INFO:HuberRegressor()
2023-03-01 15:44:02,419:INFO:create_model() successfully completed......................................
2023-03-01 15:44:02,535:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:02,535:INFO:Creating metrics dataframe
2023-03-01 15:44:02,549:INFO:Initializing K Neighbors Regressor
2023-03-01 15:44:02,549:INFO:Total runtime is 0.2709806799888611 minutes
2023-03-01 15:44:02,553:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:02,553:INFO:Initializing create_model()
2023-03-01 15:44:02,553:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:02,553:INFO:Checking exceptions
2023-03-01 15:44:02,553:INFO:Importing libraries
2023-03-01 15:44:02,553:INFO:Copying training dataset
2023-03-01 15:44:02,564:INFO:Defining folds
2023-03-01 15:44:02,564:INFO:Declaring metric variables
2023-03-01 15:44:02,567:INFO:Importing untrained model
2023-03-01 15:44:02,571:INFO:K Neighbors Regressor Imported successfully
2023-03-01 15:44:02,578:INFO:Starting cross validation
2023-03-01 15:44:02,579:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:02,906:INFO:Calculating mean and std
2023-03-01 15:44:02,908:INFO:Creating metrics dataframe
2023-03-01 15:44:02,911:INFO:Uploading results into container
2023-03-01 15:44:02,911:INFO:Uploading model into container now
2023-03-01 15:44:02,912:INFO:_master_model_container: 11
2023-03-01 15:44:02,912:INFO:_display_container: 2
2023-03-01 15:44:02,912:INFO:KNeighborsRegressor(n_jobs=-1)
2023-03-01 15:44:02,912:INFO:create_model() successfully completed......................................
2023-03-01 15:44:03,006:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:03,007:INFO:Creating metrics dataframe
2023-03-01 15:44:03,022:INFO:Initializing Decision Tree Regressor
2023-03-01 15:44:03,022:INFO:Total runtime is 0.2788668672243754 minutes
2023-03-01 15:44:03,027:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:03,027:INFO:Initializing create_model()
2023-03-01 15:44:03,027:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:03,028:INFO:Checking exceptions
2023-03-01 15:44:03,028:INFO:Importing libraries
2023-03-01 15:44:03,028:INFO:Copying training dataset
2023-03-01 15:44:03,040:INFO:Defining folds
2023-03-01 15:44:03,040:INFO:Declaring metric variables
2023-03-01 15:44:03,043:INFO:Importing untrained model
2023-03-01 15:44:03,047:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:44:03,053:INFO:Starting cross validation
2023-03-01 15:44:03,054:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:03,287:INFO:Calculating mean and std
2023-03-01 15:44:03,289:INFO:Creating metrics dataframe
2023-03-01 15:44:03,292:INFO:Uploading results into container
2023-03-01 15:44:03,292:INFO:Uploading model into container now
2023-03-01 15:44:03,293:INFO:_master_model_container: 12
2023-03-01 15:44:03,293:INFO:_display_container: 2
2023-03-01 15:44:03,293:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:44:03,293:INFO:create_model() successfully completed......................................
2023-03-01 15:44:03,385:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:03,385:INFO:Creating metrics dataframe
2023-03-01 15:44:03,400:INFO:Initializing Random Forest Regressor
2023-03-01 15:44:03,400:INFO:Total runtime is 0.28515806992848713 minutes
2023-03-01 15:44:03,404:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:03,405:INFO:Initializing create_model()
2023-03-01 15:44:03,405:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:03,405:INFO:Checking exceptions
2023-03-01 15:44:03,405:INFO:Importing libraries
2023-03-01 15:44:03,405:INFO:Copying training dataset
2023-03-01 15:44:03,417:INFO:Defining folds
2023-03-01 15:44:03,417:INFO:Declaring metric variables
2023-03-01 15:44:03,421:INFO:Importing untrained model
2023-03-01 15:44:03,425:INFO:Random Forest Regressor Imported successfully
2023-03-01 15:44:03,432:INFO:Starting cross validation
2023-03-01 15:44:03,433:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:03,930:INFO:Calculating mean and std
2023-03-01 15:44:03,932:INFO:Creating metrics dataframe
2023-03-01 15:44:03,935:INFO:Uploading results into container
2023-03-01 15:44:03,936:INFO:Uploading model into container now
2023-03-01 15:44:03,936:INFO:_master_model_container: 13
2023-03-01 15:44:03,936:INFO:_display_container: 2
2023-03-01 15:44:03,937:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-03-01 15:44:03,937:INFO:create_model() successfully completed......................................
2023-03-01 15:44:04,036:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:04,036:INFO:Creating metrics dataframe
2023-03-01 15:44:04,052:INFO:Initializing Extra Trees Regressor
2023-03-01 15:44:04,052:INFO:Total runtime is 0.2960342685381571 minutes
2023-03-01 15:44:04,057:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:04,058:INFO:Initializing create_model()
2023-03-01 15:44:04,058:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:04,058:INFO:Checking exceptions
2023-03-01 15:44:04,059:INFO:Importing libraries
2023-03-01 15:44:04,059:INFO:Copying training dataset
2023-03-01 15:44:04,070:INFO:Defining folds
2023-03-01 15:44:04,071:INFO:Declaring metric variables
2023-03-01 15:44:04,074:INFO:Importing untrained model
2023-03-01 15:44:04,079:INFO:Extra Trees Regressor Imported successfully
2023-03-01 15:44:04,086:INFO:Starting cross validation
2023-03-01 15:44:04,087:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:04,806:INFO:Calculating mean and std
2023-03-01 15:44:04,808:INFO:Creating metrics dataframe
2023-03-01 15:44:04,813:INFO:Uploading results into container
2023-03-01 15:44:04,814:INFO:Uploading model into container now
2023-03-01 15:44:04,815:INFO:_master_model_container: 14
2023-03-01 15:44:04,815:INFO:_display_container: 2
2023-03-01 15:44:04,816:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-03-01 15:44:04,816:INFO:create_model() successfully completed......................................
2023-03-01 15:44:04,936:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:04,936:INFO:Creating metrics dataframe
2023-03-01 15:44:04,951:INFO:Initializing AdaBoost Regressor
2023-03-01 15:44:04,951:INFO:Total runtime is 0.3110167980194092 minutes
2023-03-01 15:44:04,955:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:04,956:INFO:Initializing create_model()
2023-03-01 15:44:04,956:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:04,956:INFO:Checking exceptions
2023-03-01 15:44:04,956:INFO:Importing libraries
2023-03-01 15:44:04,956:INFO:Copying training dataset
2023-03-01 15:44:04,968:INFO:Defining folds
2023-03-01 15:44:04,968:INFO:Declaring metric variables
2023-03-01 15:44:04,972:INFO:Importing untrained model
2023-03-01 15:44:04,976:INFO:AdaBoost Regressor Imported successfully
2023-03-01 15:44:04,983:INFO:Starting cross validation
2023-03-01 15:44:04,984:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:05,311:INFO:Calculating mean and std
2023-03-01 15:44:05,313:INFO:Creating metrics dataframe
2023-03-01 15:44:05,318:INFO:Uploading results into container
2023-03-01 15:44:05,318:INFO:Uploading model into container now
2023-03-01 15:44:05,319:INFO:_master_model_container: 15
2023-03-01 15:44:05,319:INFO:_display_container: 2
2023-03-01 15:44:05,319:INFO:AdaBoostRegressor(random_state=1)
2023-03-01 15:44:05,319:INFO:create_model() successfully completed......................................
2023-03-01 15:44:05,437:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:05,438:INFO:Creating metrics dataframe
2023-03-01 15:44:05,453:INFO:Initializing Gradient Boosting Regressor
2023-03-01 15:44:05,454:INFO:Total runtime is 0.31938728094100954 minutes
2023-03-01 15:44:05,457:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:05,458:INFO:Initializing create_model()
2023-03-01 15:44:05,458:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:05,458:INFO:Checking exceptions
2023-03-01 15:44:05,458:INFO:Importing libraries
2023-03-01 15:44:05,458:INFO:Copying training dataset
2023-03-01 15:44:05,470:INFO:Defining folds
2023-03-01 15:44:05,470:INFO:Declaring metric variables
2023-03-01 15:44:05,474:INFO:Importing untrained model
2023-03-01 15:44:05,478:INFO:Gradient Boosting Regressor Imported successfully
2023-03-01 15:44:05,485:INFO:Starting cross validation
2023-03-01 15:44:05,486:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:05,799:INFO:Calculating mean and std
2023-03-01 15:44:05,800:INFO:Creating metrics dataframe
2023-03-01 15:44:05,804:INFO:Uploading results into container
2023-03-01 15:44:05,804:INFO:Uploading model into container now
2023-03-01 15:44:05,804:INFO:_master_model_container: 16
2023-03-01 15:44:05,805:INFO:_display_container: 2
2023-03-01 15:44:05,805:INFO:GradientBoostingRegressor(random_state=1)
2023-03-01 15:44:05,805:INFO:create_model() successfully completed......................................
2023-03-01 15:44:05,902:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:05,903:INFO:Creating metrics dataframe
2023-03-01 15:44:05,918:INFO:Initializing Light Gradient Boosting Machine
2023-03-01 15:44:05,919:INFO:Total runtime is 0.32713710069656377 minutes
2023-03-01 15:44:05,923:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:05,923:INFO:Initializing create_model()
2023-03-01 15:44:05,923:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:05,923:INFO:Checking exceptions
2023-03-01 15:44:05,924:INFO:Importing libraries
2023-03-01 15:44:05,924:INFO:Copying training dataset
2023-03-01 15:44:05,935:INFO:Defining folds
2023-03-01 15:44:05,935:INFO:Declaring metric variables
2023-03-01 15:44:05,939:INFO:Importing untrained model
2023-03-01 15:44:05,944:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-01 15:44:05,951:INFO:Starting cross validation
2023-03-01 15:44:05,952:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:07,689:INFO:Calculating mean and std
2023-03-01 15:44:07,691:INFO:Creating metrics dataframe
2023-03-01 15:44:07,694:INFO:Uploading results into container
2023-03-01 15:44:07,695:INFO:Uploading model into container now
2023-03-01 15:44:07,695:INFO:_master_model_container: 17
2023-03-01 15:44:07,696:INFO:_display_container: 2
2023-03-01 15:44:07,696:INFO:LGBMRegressor(random_state=1)
2023-03-01 15:44:07,696:INFO:create_model() successfully completed......................................
2023-03-01 15:44:07,796:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:07,796:INFO:Creating metrics dataframe
2023-03-01 15:44:07,814:INFO:Initializing Dummy Regressor
2023-03-01 15:44:07,814:INFO:Total runtime is 0.3587271332740784 minutes
2023-03-01 15:44:07,818:INFO:SubProcess create_model() called ==================================
2023-03-01 15:44:07,818:INFO:Initializing create_model()
2023-03-01 15:44:07,818:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fc659c90730>, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:07,818:INFO:Checking exceptions
2023-03-01 15:44:07,818:INFO:Importing libraries
2023-03-01 15:44:07,818:INFO:Copying training dataset
2023-03-01 15:44:07,831:INFO:Defining folds
2023-03-01 15:44:07,831:INFO:Declaring metric variables
2023-03-01 15:44:07,834:INFO:Importing untrained model
2023-03-01 15:44:07,838:INFO:Dummy Regressor Imported successfully
2023-03-01 15:44:07,845:INFO:Starting cross validation
2023-03-01 15:44:07,846:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:08,047:INFO:Calculating mean and std
2023-03-01 15:44:08,049:INFO:Creating metrics dataframe
2023-03-01 15:44:08,052:INFO:Uploading results into container
2023-03-01 15:44:08,052:INFO:Uploading model into container now
2023-03-01 15:44:08,053:INFO:_master_model_container: 18
2023-03-01 15:44:08,053:INFO:_display_container: 2
2023-03-01 15:44:08,053:INFO:DummyRegressor()
2023-03-01 15:44:08,053:INFO:create_model() successfully completed......................................
2023-03-01 15:44:08,150:INFO:SubProcess create_model() end ==================================
2023-03-01 15:44:08,151:INFO:Creating metrics dataframe
2023-03-01 15:44:08,178:INFO:Initializing create_model()
2023-03-01 15:44:08,178:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=DecisionTreeRegressor(random_state=1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:08,178:INFO:Checking exceptions
2023-03-01 15:44:08,180:INFO:Importing libraries
2023-03-01 15:44:08,180:INFO:Copying training dataset
2023-03-01 15:44:08,190:INFO:Defining folds
2023-03-01 15:44:08,191:INFO:Declaring metric variables
2023-03-01 15:44:08,191:INFO:Importing untrained model
2023-03-01 15:44:08,191:INFO:Declaring custom model
2023-03-01 15:44:08,191:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:44:08,192:INFO:Cross validation set to False
2023-03-01 15:44:08,192:INFO:Fitting Model
2023-03-01 15:44:08,232:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:44:08,232:INFO:create_model() successfully completed......................................
2023-03-01 15:44:08,397:INFO:_master_model_container: 18
2023-03-01 15:44:08,397:INFO:_display_container: 2
2023-03-01 15:44:08,397:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:44:08,398:INFO:compare_models() successfully completed......................................
2023-03-01 15:44:08,407:INFO:Initializing create_model()
2023-03-01 15:44:08,407:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fc674d194c0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-01 15:44:08,407:INFO:Checking exceptions
2023-03-01 15:44:08,433:INFO:Importing libraries
2023-03-01 15:44:08,434:INFO:Copying training dataset
2023-03-01 15:44:08,446:INFO:Defining folds
2023-03-01 15:44:08,447:INFO:Declaring metric variables
2023-03-01 15:44:08,451:INFO:Importing untrained model
2023-03-01 15:44:08,455:INFO:Decision Tree Regressor Imported successfully
2023-03-01 15:44:08,465:INFO:Starting cross validation
2023-03-01 15:44:08,466:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-01 15:44:08,705:INFO:Calculating mean and std
2023-03-01 15:44:08,705:INFO:Creating metrics dataframe
2023-03-01 15:44:08,711:INFO:Finalizing model
2023-03-01 15:44:08,772:INFO:Uploading results into container
2023-03-01 15:44:08,773:INFO:Uploading model into container now
2023-03-01 15:44:08,787:INFO:_master_model_container: 19
2023-03-01 15:44:08,788:INFO:_display_container: 3
2023-03-01 15:44:08,788:INFO:DecisionTreeRegressor(random_state=1)
2023-03-01 15:44:08,788:INFO:create_model() successfully completed......................................
